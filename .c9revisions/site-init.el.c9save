{"ts":1350030026526,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,";;; $Id: site-init.el,v 1.37 2008-03-05 23:32:27 hute37 Exp $\n\n;;;\n;;; $Revision: 1.37 $\n;;;\n;;; $Log: site-init.el,v $\n;;; Revision 1.37  2008-03-05 23:32:27  hute37\n;;; ubuntu source build\n;;;\n;;; Revision 1.36  2007-12-04 23:03:42  hute37\n;;; xft, built from source\n;;;\n;;; Revision 1.35  2006-10-13 20:10:00  hute37\n;;; dot\n;;;\n;;; Revision 1.34  2006/10/13 20:03:07  hute37\n;;; Graphviz dot-mode\n;;;\n;;; Revision 1.33  2006/10/04 01:15:29  hute37\n;;; toggle menubar, toolbar\n;;;\n;;; Revision 1.32  2006/10/03 23:33:14  hute37\n;;; XEmacs fonts\n;;;\n;;; Revision 1.31  2006/09/30 00:44:19  hute37\n;;; XEmacs/Lucid\n;;;\n;;; Revision 1.30  2006/01/13 00:34:59  hute37\n;;; nxml nt support\n;;;\n;;; Revision 1.29  2006/01/12 03:47:01  hute37\n;;; added J.Clark nxml-mode (incompatible with Mule-UCS)\n;;;\n;;; Revision 1.28  2006/01/09 22:38:32  hute37\n;;; hs load\n;;;\n;;; Revision 1.27  2005/12/22 03:11:32  hute37\n;;; hs ...\n;;;\n;;; Revision 1.26  2005/12/22 03:10:53  hute37\n;;; hs\n;;;\n;;; Revision 1.25  2005/12/22 02:30:42  hute37\n;;; view-mode\n;;;\n;;; Revision 1.24  2005/12/22 00:56:23  hute37\n;;; icycles mode disabled\n;;;\n;;; Revision 1.23  2005/12/16 01:27:38  hute37\n;;; move icicles at end\n;;;\n;;; Revision 1.22  2005/12/10 01:10:42  hute37\n;;; *** empty log message ***\n;;;\n;;; Revision 1.21  2005/12/06 05:19:08  hute37\n;;; *** empty log message ***\n;;;\n;;; Revision 1.20  2005/12/05 03:06:47  hute37\n;;; mode-compile\n;;;\n;;; Revision 1.19  2005/12/04 23:31:49  hute37\n;;; tinyperl\n;;;\n;;; Revision 1.18  2005/12/03 01:13:39  hute37\n;;; us-keys\n;;;\n;;; Revision 1.17  2005/12/03 00:23:54  hute37\n;;; merged with ascii\n;;;\n;;; Revision 1.16  2005/12/03 00:12:05  hute37\n;;; mouseme !supported on ntemacs\n;;;\n;;; Revision 1.15  2005/11/29 03:42:23  hute37\n;;; kp-keys\n;;;\n;;; Revision 1.14  2005/11/29 00:59:18  hute37\n;;; dabbrev\n;;;\n;;; Revision 1.13  2005/11/28 01:11:28  hute37\n;;; perldoc\n;;;\n;;; Revision 1.12  2005/11/28 00:46:41  hute37\n;;; vcs commands\n;;;\n;;; Revision 1.11  2005/11/28 00:41:59  hute37\n;;; test\n;;;\n;;; Revision 1.10  2005/11/28 00:39:43  hute37\n;;; reorder fn keys\n;;;\n;;; Revision 1.9  2005/11/27 19:23:29  hute37\n;;; *refactored*\n;;;\n;;; Revision 1.8  2005/11/26 02:20:37  hute37\n;;; removed xemacs support\n;;;\n;;; Revision 1.7  2005/11/26 02:11:32  hute37\n;;; clean\n;;;\n;;; Revision 1.6  2005/11/26 02:00:27  hute37\n;;; *** empty log message ***\n;;;\n;;; Revision 1.5  2005/11/26 01:58:25  hute37\n;;; vc-mode-line ?removed\n;;;\n;;; Revision 1.4  2005/11/26 01:54:37  hute37\n;;; (mode-line) removed\n;;;\n;;; Revision 1.3  2005/11/26 01:43:39  hute37\n;;; vc-mode-line\n;;;\n;;; Revision 1.2  2005/11/26 01:30:43  hute37\n;;; add kkv\n;;;\n;;;\n;;;\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @FORK\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( emacs )-----------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n    ))\n (t\n  (progn\n    (message (concat (format \"%s\" z-emacs-type) \"-unknown\"))\n    ))\n )\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @AUTOLOAD\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( server )-----------------------------------------------------\n\n(cond\n ((eq system-type 'windows-nt) ;; WinNT\n  (progn\n;; *unsupported*\n;;    (require 'gnuserv)\n;;    (gnuserv-start)\n;;    (setq gnuserv-frame (selected-frame))\n    ))\n ((eq system-type 'cygwin);; GNU-Cygwin\n  (progn\n   ;; (server-start)\n    ))\n ((eq system-type 'gnu/linux);; GNU-Linux\n  (progn\n    (server-start)))\n ((eq system-type 'usg-unix-v);; Sun Solaris\n  (progn\n    (server-start)))\n (t\n  (progn\n    ))\n )\n\n\n;; ;; ---( tiny )---------------------------------------------------------\n\n;; (cond (nil(progn \n;; ;;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n;; (cond\n;;  ((eq z-emacs-type 'xemacs) ;; XEmacs\n;;   (progn\n;;     ))\n;;  ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n;;   (progn\n\n\n;; (setq tiny-home (concat emacs-site-path \"addon/tiny/\" ))\n\n;; (add-to-list 'load-path (concat tiny-home \"lisp/tiny\" ) t)\n;; (add-to-list 'load-path (concat tiny-home \"lisp/other\" ) t)\n\n;; ;; (setq load-path \n;; ;;       (append load-path \n;; ;; \t      (list \n;; ;; \t       (concat tiny-home \"lisp/tiny\" )\n;; ;; \t       (concat tiny-home \"lisp/other\" ))\n;; ;; \t      ))\n\n\n;; (load \"tinypath\" )\n\n;; ;; tiny eager load\n;; ;;(require 'tiny-setup)\n;; ;;(tiny-setup nil)\n\n;; ;; tiny lazy load\n;; (require 'tiny-autoload-loaddefs-tiny)\n;; (require 'tiny-autoload-loaddefs-other)\n\n\n\n;;     ))\n;;  )\n\n\n;; ;;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n;; )))\n\n\n\n;; ---( required )---------------------------------------------------------\n\n(require 'bs)\n\n(require 'ffap)\n(require 'imenu)\n(require 'gud)\n\n;;(require 'lcomp) ;;to prevent M-c remap\n\n\n;; ---( EmacsWiki )---------------------------------------------------------\n\n;;(require 'ring+)\n(eval-after-load \"ring\" '(progn (require 'ring+)))\n\n(require 'doremi)\n(require 'doremi-frm)\n(require 'doremi-cmd)\n(require 'frame-cmds)\n(require 'zoom-frm)\n\n\n;; ---( all )---------------------------------------------------------\n\n(load \"all\")                            ;; xedit all\n\n;; ---( mode-compile )-----------------------------------------------------\n\n(autoload 'mode-compile \"mode-compile\"\n  \"Command to compile current buffer file based on the major mode\" t)\n(autoload 'mode-compile-kill \"mode-compile\"\n  \"Command to kill a compilation launched by `mode-compile'\" t)\n\n;; ---( cygwin )-----------------------------------------------------\n\n(cond\n ((eq system-type 'windows-nt) ;; WinNT\n  (progn\n    ))\n ((eq system-type 'cygwin);; GNU-Cygwin\n  (progn\n(require 'cygwin-mount)\n (cygwin-mount-activate)\n\n    ))\n ((eq system-type 'gnu/linux);; GNU-Linux\n  (progn\n    ))\n ((eq system-type 'usg-unix-v);; Sun Solaris\n  (progn\n    ))\n (t\n  (progn\n    ))\n )\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @THEMES\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( Custom Fonts )----------------------------------------------------\n\n(require 'ergo-font)\n\n\n;; ---( Color )-----------------------------------------------------------\n\n(require 'color-theme)\n(require 'color-theme-zcoll)\n(require 'color-theme-solarized)\n(setq color-theme-is-global nil)\n\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @VC\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( Git )----------------------------------------------------\n\n;; http://www.emacswiki.org/emacs/Git\n;; http://www.michael-hammer.at/blog/emacs_git/\n;; http://alexott.net/en/writings/emacs-vcs/EmacsGit.html\n\n;; http://help.github.com/linux-set-up-git/\n;; http://help.github.com/fork-a-repo/\n\n\n;; sudo apt-get install magit\n\n;;@TODO: move to site-start.d local directory ...\n\n;;; Autoloads for magit\n\n(autoload 'magit-status \"magit\" nil t)\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @GLOBALS\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( Customize Settings )----------------------------------------------------\n\n;; visible bell\n(setq visible-bell t)\n\n;; init message\n(setq initial-scratch-message nil)\n\n\n\n;; ---( PC Select )----------------------------------------------------\n\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n(require 'pc-select)\n(pc-select-mode t)\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n;; pc-select\n(require 'pc-select)\n;;(pc-select-selection-keys-only t)\n;;(pc-selection-mode t nil '(pc-select))\n;;(setq pc-select-selection-keys-only t)\n(pc-selection-mode)\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n;; ---( Global Settings )----------------------------------------------------\n\n;; Enable uppercase or lowercase conversions\n(put 'downcase-region 'disabled nil)\n(put 'upcase-region 'disabled nil)\n\n;; Disable narrowing, whatever the hell it is.\n(put 'narrow-to-region 'disabled nil)\n\n;; Scrolling\n;;(setq scroll-step 1)\n\n;;(setq truncate-lines t)\n\n\n;; ---( AutoRevert )---------------------------------------------------------\n\n;;(autoload 'auto-revert-mode \"autorevert\" nil t)\n;;(autoload 'turn-on-auto-revert-mode \"autorevert\" nil nil)\n;;(autoload 'global-auto-revert-mode \"autorevert\" nil t)\n\n;; (global-auto-revert-mode 1) ;--- enable autorevert -------------\n\n;;(add-hook 'java-mode-hook 'turn-on-auto-revert-mode)\n;;(setq auto-revert-interval 5) ;--- check interval: 5 sec. -------------\n\n\n;; ---( Grep )--------------------------------------------------------\n\n;; Ignore case by default:\n;;(setq igrep-options \"-i\")\n;;(setq grep-command \"egrep -n\")\n\n;; To search subdirectories by default:\n;;(setq igrep-find t)\n\n;;(setq ediff-ignore-similar-regions t)\n;;(setq ediff-use-last-dir t)\n;;(setq ediff-diff-options \" -b \")\n\n;; ---( i8n )----------------------------------------------------\n\n;;;_ + mule\n;;(set-terminal-coding-system 'iso-latin-1)\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @CUSTOM PROPERTIES\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( Misc )---------------------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n    (customize-set-variable 'font-menu-this-frame-only-p t)\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n;;\n    ))\n (t\n  (progn\n    ))\n )\n\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @FEATURES\n;;;////////////////////////////////////////////////////////////////\n\n\n;; ---( Session )--------------------------------------------------------\n\n;;@TODO: verify session setup ...\n;;(require 'session)\n;;(session-initialize)\n\n\n;; ---( Backup )--------------------------------------------------------\n\n(setq backup-by-copying t)\n(require 'backups)\n(move-backups t)\n\n(setq backup-directory \"~/.backups\")\n\n(or (directory-files backup-directory)\n\t  (make-directory backup-directory))\n\n(require 'backup-dir)\n(setq bkup-backup-directory-info\n\t\t`(\n       (t ,(concat backup-directory \"/\") full-path prepend-name search-upward)\n;      (t ,(concat backup-directory \"/\"))\n\t\t  ))\n\n\n;; ---( HideShow )--------------------------------------------------------\n\n(require 'hideshow)\n;; (add-hook 'X-mode-hook               ; other modes similarly\n;;           '(lambda () (hs-minor-mode 1)))\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @FUNCTIONS\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( util )---------------------------------------------------------\n\n;; Replace \"yes or no\" with y or n\n(defun yes-or-no-p (arg)\n  \"An alias for y-or-n-p, because I hate having to type 'yes' or 'no'.\"\n  (y-or-n-p arg))\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @MACRO\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( input macros )---------------------------------------------------------\n\n(defun scroll-up-one ( )\n  \"up-one.\"\n  (interactive)\n  (scroll-up 1))\n(defun scroll-down-one ( )\n  \"down-one.\"\n  (interactive)\n  (scroll-down 1))\n\n\n;; ---( grep )---------------------------------------------------------\n\n\n(defvar grep-all-files-history nil)\n\n(defvar grep-all-files-omitted-expressions\n  '(\"*~\" \"#*\" \".#*\" \",*\" \"*.elc\" \"*.obj\" \"*.o\" \"*.exe\" \"*.dll\" \"*.lib\" \"*.a\"\n    \"*.dvi\" \"*.class\" \"*.bin\")\n  \"List of expressions matching files to be omitted in `grep-all-files-...'.\nEach entry should be a simple name or a shell wildcard expression.\")\n\n(defvar grep-all-files-omitted-directories '(\"CVS\" \"RCS\" \"SCCS\")\n  \"List of directories not to recurse into in `grep-all-files-...'.\nEach entry should be a simple name or a shell wildcard expression.\")\n\n(defun construct-grep-all-files-command (find-segment grep-segment)\n  (let ((omit-annoying\n\t (mapconcat #'(lambda (wildcard)\n\t\t\t(concat \"-name '\" wildcard \"' -or \"))\n\t\t    grep-all-files-omitted-expressions\n\t\t    \"\")))\n    (cond ((eq grep-find-use-xargs 'gnu)\n\t   (format \"find . %s %s -type f -print0 | xargs -0 -e %s\"\n\t\t   find-segment omit-annoying grep-segment))\n\t  (grep-find-use-xargs\n\t   (format \"find . %s %s -type f -print | xargs %s\"\n\t\t   find-segment omit-annoying grep-segment))\n\t  (t\n\t   (format \"find . %s %s -type f -exec %s {} /dev/null \\\\;\"\n\t\t   find-segment omit-annoying grep-segment)))))\n\n(defun grep-all-files-in-current-directory (command)\n  \"Run `grep' in all non-annoying files in the current directory.\n`Non-annoying' excludes backup files, autosave files, CVS merge files, etc.\nMore specifically, this is controlled by `grep-all-files-omitted-expressions'.\n\nThis function does not recurse into subdirectories.  If you want this,\nuse \\\\[grep-all-files-in-current-directory-and-below].\"\n  (interactive\n   (progn\n     (require 'compile)\n     (list (read-shell-command \"Run grep (like this): \"\n\t\t\t       grep-command 'grep-all-files-history))))\n  (require 'compile)\n  (grep (construct-grep-all-files-command\n\t \"-name . -or -type d -prune -or\" command)))\n\n(defun grep-all-files-in-current-directory-and-below (command)\n  \"Run `grep' in all non-annoying files in the current directory and below.\n`Non-annoying' excludes backup files, autosave files, CVS merge files, etc.\nMore specifically, this is controlled by `grep-all-files-omitted-expressions'.\n\nThis function recurses into subdirectories.  If you do not want this,\nuse \\\\[grep-all-files-in-current-directory].\"\n  (interactive\n   (progn\n     (require 'compile)\n     (list (read-shell-command \"Run grep (like this): \"\n\t\t\t       grep-command 'grep-all-files-history))))\n  (require 'compile)\n  (grep (construct-grep-all-files-command\n\t ;; prune all specified directories.\n\t (mapconcat #'(lambda (wildcard)\n\t\t\t(concat \"-name '\" wildcard \"' -prune -or \"))\n\t\t    grep-all-files-omitted-directories\n\t\t    \"\")\n\t command)))\n\n\n;; ---( select )-------------------------------------------------------\n\n\n(defun clear-select ()\n  \"Repeatedly select ever larger balanced expressions around the cursor.\nOnce you have such an expression marked, you can expand to the end of\nthe following expression with \\\\[mark-sexp] and to the beginning of the\nprevious with \\\\[backward-sexp].\"\n  (interactive \"_\") ;this means \"preserve the active region after this command\"\n  (backward-up-list 1)\n  (let ((end (save-excursion (forward-sexp) (point))))\n    (push-mark end nil t)))\n\n\n\n\n;; ---( wrap )---------------------------------------------------------\n\n;; Toggles between line wrapping in the current buffer.\n(defun toggle-line-wrapping ()\n  \"Toggles between line wrapping in the current buffer.\"\n  (interactive)\n  (if (eq truncate-lines nil)\n      (progn\n        (setq truncate-lines t)\n        (redraw-display)\n        (message \"Setting truncate-lines to t\"))\n    (setq truncate-lines nil)\n    (redraw-display)\n    (message \"Setting truncate-lines to nil\"))\n  )\n\n;; ---( kbd-macro )-----------------------------------------------------\n\n(defun start-or-end-kbd-macro ()\n  ;; A doc string.  This is optional.\n  \"Start defining a keyboard macro, or stop if we're already defining.\"\n  ;; IMPORTANT: Any function bound to a key MUST have an interactive spec,\n  ;; usually just the following line:\n  (interactive)\n  (if defining-kbd-macro\n      (end-kbd-macro)\n    (start-kbd-macro nil)))\n\n\n;; ---( ascii )---------------------------------------------------------\n\n(defun self-insert-backquote ( )\n  \"insert backquote `.\"\n  (interactive)\n  (insert-char ?` 1))\n\n(defun self-insert-tilde ( )\n  \"insert tilde ~.\"\n  (interactive)\n  (insert-char ?~ 1))\n\n;; ---( format )---------------------------------------------------------\n\n;; Untabifies entire buffer.\n(defun untabify-buffer ()\n  \"Untabifies entire buffer.\"\n  (interactive)\n  (point-to-register 1)\n  (goto-char (point-min))\n  (untabify (point-min) (point-max))\n  (register-to-point 1)\n  )\n\n;; Tabifies entire buffer.\n(defun tabify-buffer ()\n  \"Tabifies entire buffer.\"\n  (interactive)\n  (point-to-register 1)\n  (goto-char (point-min))\n  (tabify (point-min) (point-max))\n  (register-to-point 1)\n  )\n\n(defun remove-trailing-ctl-M ()\n  \"Propose to remove trailing ^M from a file.\"\n  (interactive)\n  (save-excursion\n    (goto-char (point-min))\n    (if (and (not (string-match \".gz$\" (buffer-file-name)))\n             (search-forward-regexp \"\n$\" nil t))\n                                        ;: a ^M is found\n        (if (or (= (preceding-char) ?\\^J)\n                (= (following-char) ?\\^J) )\n            (if (y-or-n-p (format \"Remove trailing ^M from %s? \"\n                                  (buffer-file-name)))\n                (progn (goto-char (point-min))\n                       (perform-replace \"\n\" \"\" nil nil nil)\n                       (pop-mark)\n                       (save-buffer))\n              (message \"No transformation.\"))))))\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @UI\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( Menu )-----------------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n    (defvar init-menubar current-menubar)\n    (set-menubar nil)\n\n    (defun toggle-menubar ()\n      (interactive)\n      (if (eq current-menubar nil)\n\t  (progn\n\t    (set-menubar init-menubar)\n\t    (redraw-display)\n\t    (message \"Menu ON\"))\n\t(progn \n\t  (set-menubar nil)\n\t  (redraw-display)\n\t  (message \"Menu OFF\"))))\n\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n    (menu-bar-mode 0)\n\n    (defun toggle-menubar ()\n      (interactive)\n      (menu-bar-mode nil))\n    \n    ))\n (t\n  (progn\n    (defun toggle-menubar ()\n      (interactive)\n      (error \"toggle-menubar unsupported ...\"))\n    ))\n )\n\n\n;; ;; ---( Gutter )-----------------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n    (customize-set-variable 'gutter-buffers-tab-visible-p nil)\n\n    (defun toggle-gutter ()\n      (interactive)\n      (customize-set-variable 'gutter-buffers-tab-visible-p \n\t\t\t      (not gutter-buffers-tab-visible-p)))\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n    (defun toggle-gutter ()\n      (interactive)\n      (error \"toggle-gutter unsupported ...\"))\n    \n    ))\n (t\n  (progn\n    (defun toggle-gutter ()\n      (interactive)\n      (error \"toggle-gutter unsupported ...\"))\n    ))\n )\n\n\n\n\n;; ---( Toolbar )--------------------------------------------------------\n\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n    (customize-set-variable 'toolbar-visible-p nil)\n\n    (defun toggle-toolbar ()\n      (interactive)\n      (customize-set-variable 'toolbar-visible-p \n\t\t\t      (not toolbar-visible-p)))\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n    (tool-bar-mode 0)\n\n    (defun toggle-toolbar ()\n      (interactive)\n      (tool-bar-mode))\n\n    ))\n (t\n  (progn\n    (defun toggle-toolbar ()\n      (interactive)\n      (error \"toggle-toolbar unsupported ...\"))\n    ))\n )\n\n\n;; ---( Modeline )-------------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n (customize-set-variable 'modeline-scrolling-method t)\n (customize-set-variable 'line-number-mode t)\n (customize-set-variable 'column-number-mode t)\n\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n;; no custom\n\n    ))\n (t\n  (progn\n    ))\n )\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @FRAME L&F\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( Look )---------------------------------------------------------------\n\n\n;; ---( Feel )---------------------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n (customize-set-variable 'auto-raise-frame t)\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n;; no custom\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @MOUSE INPUT MAPPINGS\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( Wheel )---------------------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n(mouse-wheel-mode t)                      ;; enable wheel\n\n(global-set-key [C-mouse-4] 'text-scale-decrease)\n(global-set-key [C-mouse-5] 'text-scale-increase)\n(global-set-key [M-mouse-4] 'bs-cycle-next)\n(global-set-key [M-mouse-5] 'bs-cycle-previous)\n\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n\n;; ---( Meta )---------------------------------------------------------------\n\n;; Paste at point NOT at cursor\n;(setq mouse-yank-at-point 't)\n\n;; ---( Mapping )---------------------------------------------------------------\n\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n;;TODO: toolbar off\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n;;(require 'mouseme)\n(define-key global-map [M-S-down-mouse-3] 'imenu)\n;;(define-key global-map [C-S-down-mouse-3] 'mouse-me)\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @KEYBOARD INPUT MAPPINGS\n;;;////////////////////////////////////////////////////////////////\n\n;; ============================================\n;; ---( Edit Keys )-----\n;; ============================================\n\n;; ---( Arrows )----------------------------------------------------\n\n(global-set-key [(control up)] 'scroll-down-one )\n(global-set-key [(control down)] 'scroll-up-one )\n;; (global-set-key [(meta up)] 'backward-block-of-lines )\n;; (global-set-key [(meta down)] 'forward-block-of-lines )\n\n(global-set-key [(control right)] 'forward-word )\n(global-set-key [(control left)] 'backward-word )\n\n;; (global-set-key [(control meta right)] 'backward-sexp )\n;; (global-set-key [(control meta left)] 'forward-sexp )\n\n\n;; (global-set-key [(shift meta left)] 'backward-sexp-nomark )\n;; (global-set-key [(shift meta right)] 'forward-sexp-nomark )\n(global-set-key [(shift meta up)] 'backward-sexp-mark )\n(global-set-key [(shift meta down)] 'forward-sexp-mark )\n(global-set-key [(shift meta left)] '(lambda () (interactive) (other-frame -1)))\n(global-set-key [(shift meta right)] '(lambda () (interactive) (other-frame +1)))\n;; (global-set-key [(meta control up)] '(lambda () (interactive) (other-frame -1)))\n;; (global-set-key [(meta control down)] '(lambda () (interactive) (other-frame +1)))\n;; (global-set-key [(meta control right)] 'next-multiframe-window )\n;; (global-set-key [(meta control left)] 'previous-multiframe-window )\n\n(global-set-key [(meta up)] 'dired )\n(global-set-key [(meta down)] 'bs-show )\n(global-set-key [(meta right)] 'bs-cycle-next )\n(global-set-key [(meta left)] 'bs-cycle-previous )\n\n;; ---( Page )-------------------------------------------------------\n\n(global-set-key [(control prior)] 'other-frame )\n(global-set-key [(control next)] 'other-window )\n\n;; (global-set-key [(meta control prior)] 'outline-previous-visible-heading )\n;; (global-set-key [(meta control next)] 'outline-next-visible-heading )\n\n;; ---( Home/End )---------------------------------------------\n\n(global-set-key [(meta home)] 'delete-other-windows )\n(global-set-key [(meta end)] 'kill-this-buffer )\n\n;; ---( BackSpace )---------------------------------------------\n\n(global-set-key [backspace] 'backward-delete-char )\n(global-set-key [(control backspace)] 'backward-kill-word )\n(global-set-key [(meta backspace)] 'undo )\n\n;; ---( Tab )---------------------------------------------\n\n(global-set-key [(control shift tab)]   'bs-cycle-previous)\n(global-set-key [(control tab)]  'bs-cycle-next)\n\n\n;; ---( Return )---------------------------------------------\n\n(global-set-key [(control return)] 'ffap )\n\n(global-set-key [(meta return)] 'ffap)\n\n;; ---( Space )---------------------------------------------\n\n\n;; (global-set-key [(control meta space)]\n;;   '(lambda () (interactive)\n;; \t  (set-mark-command nil)\n;; \t  (zmacs-deactivate-region)\n;; \t  ))\n\n;;(global-set-key [(control space)] 'hippie-expand )\n;;(global-set-key [(meta space)] 'imenu)\n;;(define-key global-map [M-S-down-mouse-3] 'imenu))\n\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @COMPLETION\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( hippie-expand )------------------------------------------\n;; hippie-expand  (auto skriv resten af ord jeg har skrevet før)\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n;;TODO: completion\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n\n(define-key esc-map \"\\\\\" 'dabbrev-completion)\n(define-key global-map \"\\C-@\" 'dabbrev-expand)\n;; Many people are used to typing C-SPC and getting C-@.\n(define-key global-map [?\\C- ] 'dabbrev-expand)\n;;(global-set-key \"\\M- \" 'hippie-expand) ; der står meta space!\n(define-key esc-map \" \" 'hippie-expand)\n(setq hippie-expand-try-functions-list\n      '(try-complete-file-name-partially\n\ttry-complete-file-name\n\ttry-expand-all-abbrevs\n\ttry-expand-list\n\ttry-expand-line\n\ttry-expand-dabbrev\n\ttry-expand-dabbrev-all-buffers\n\ttry-expand-dabbrev-from-kill\n\ttry-complete-lisp-symbol-partially\n\ttry-complete-lisp-symbol))\n\n\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n\n\n;; ============================================\n;; ---( WM Keys )-----\n;; ============================================\n\n;; ---( Arrows )--------------------------------------------------\n\n(global-set-key [(meta control up)] 'raise-frame)\n(global-set-key [(meta control down)] 'lower-frame)\n(global-set-key [(meta control right)] '(lambda () (interactive) (other-frame -1)))\n(global-set-key [(meta control left)] '(lambda () (interactive) (other-frame +1)))\n\n;; ---( Page )----------------------------------------------------\n\n;; (global-set-key [(meta control prior)] 'outline-previous-visible-heading )\n;; (global-set-key [(meta control next)] 'outline-next-visible-heading )\n\n;; ---( Home/End )------------------------------------------------\n\n(global-set-key [(meta control home)] 'delete-other-windows )\n(global-set-key [(meta control end)] 'delete-window )\n\n;; ---( Tab )-----------------------------------------------------\n\n(global-set-key [(meta control shift tab)]  'previous-multiframe-window)\n(global-set-key [(meta control tab)]  'next-multiframe-window)\n\n\n;; ---( Return )---------------------------------------------------\n\n(global-set-key [(meta control return)] 'ffap)\n\n\n;; ---( Meta-Control Keys )----------------------------------------\n\n(define-key esc-map \"\\C-z\" 'iconify-or-deiconify-frame)\n(define-key esc-map \"\\C-n\" 'ergo-font-small-frame)\n\n\n\n\n\n\n\n;; ============================================\n;; ---( Function Keys )-----\n;; ============================================\n\n\n;; ---( F1: Help )---------------------------------------------------------\n\n\n(global-set-key [f1] 'help )\n(global-set-key [(shift f1)] 'woman )\n(global-set-key [(control f1)] 'find-function )\n(global-set-key [(meta f1)]\t'function-key-error)\n(global-set-key [(shift meta f1)] 'function-key-error)\n\n\n;; ---( F2: Bookmarks/Breakpoints )-------------------------------------\n\n(global-set-key [f2] ' bookmark-bmenu-list)\n(global-set-key [(shift f2)] 'bookmark-set )\n\n(global-set-key [(control f2)]\n    '(lambda () (interactive)\n       (if (eq hs-minor-mode nil)\n\t   (progn\n\t     (hs-minor-mode t)\n\t     (hs-hide-all))\n\t (hs-minor-mode nil))))\n\n(global-set-key [(meta f2)]\t'hs-toggle-hiding)\n(global-set-key [(shift meta f2)] 'toggle-line-wrapping )\n\n\n;; ---( F3: ISearch/Find )----------------------------------------------------\n\n(global-set-key [f3] 'isearch-repeat-forward )\n(global-set-key [(shift f3)] 'isearch-repeat-backward )\n(global-set-key [(control f3)] 'view-mode ) \n(global-set-key [(meta f3)] 'occur )\n(global-set-key [(shift meta f3)] 'function-key-error)\n\n;; ---( F4: Macro )----------------------------------------------------\n\n(global-set-key [f4] 'call-last-kbd-macro)\n(global-set-key [(shift f4)] 'start-or-end-kbd-macro )\n(global-set-key [(control f4)] 'edit-last-kbd-macro )\n(global-set-key [(meta f4)] 'kbd-macro-query )\n(global-set-key [(shift meta f4)] 'edit-last-kbd-macro )\n;; (global-set-key [(control f4)] 'start-kbd-macro )\n;; (global-set-key [(meta f4)] 'end-kbd-macro )\n\n;; ---( F5: Search/Grep )----------------------------------------------------\n\n(global-set-key [f5] 'isearch-forward-regexp )\n(global-set-key [(shift f5)] 'isearch-backward-regexp )\n(global-set-key [(control f5)] 'find-grep-dired )\n(global-set-key [(meta f5)] 'grep  )\n(global-set-key [(shift meta f5)] 'function-key-error)\n\n;; ---( F6: Replace/Ediff )----------------------------------------------------\n\n(global-set-key [f6] 'query-replace )\n(global-set-key [(shift f6)] 'query-replace-regexp )\n(global-set-key [(control f6)] 'compare-windows )\n(global-set-key [(meta f6)] 'ediff )\n(global-set-key [(shift meta f6)] 'function-key-error)\n\n;; ---( F7: Debug/Step )----------------------------------------------------\n\n(global-set-key [f7] 'gud-step ) ;;@TODO: move to local mode map\n(global-set-key [(control f7)] 'function-key-error)\n(global-set-key [(meta f7)] 'function-key-error)\n(global-set-key [(shift f7)] 'function-key-error)\n(global-set-key [(shift meta f7)] 'function-key-error)\n\n;; ---( F8: Debug/Next )----------------------------------------------------\n\n;;(global-set-key [f8] 'function-key-error ) ;;WM expose\n(global-set-key [(control f8)] 'gud-next) ;;@TODO: move to local mode map\n(global-set-key [(meta f8)] 'function-key-error)\n(global-set-key [(shift f8)] 'function-key-error)\n(global-set-key [(shift meta f8)] 'function-key-error)\n\n;; ---( F9: compile/run )----------------------------------------------------\n\n;;(global-set-key [f9] 'function-key-error ) ;;WM expose\n;;(global-set-key [f9] 'perldb ) ;;@TODO: move to local mode map\n(global-set-key [(shift f9)] 'mode-compile-kill )\n(global-set-key [(control f9)] 'mode-compile )\n;;(global-set-key [(meta f9)] 'recompile )\n;;(global-set-key [(shift meta f9)] 'compile)\n\n(global-set-key [(meta f9)] 'shell)\n(global-set-key [(shift meta f9)] 'list-processes)\n\n\n;; ---( F10: UI )----------------------------------------------------\n\n;;(global-set-key [f10] 'menu )\n;;(global-set-key [(control f10)] 'menu-bar-mode )\n(global-set-key [(control f10)] 'toggle-menubar )\n(global-set-key [(shift f10)] 'toggle-toolbar )\n(global-set-key [(meta f10)] 'speedbar )\n(global-set-key [(shift meta f10)] 'toggle-gutter)\n\n\n;; ---( F11: VCS )----------------------------------------------------\n\n(cond\n ((fboundp 'magit-status);; Git magit\n  (progn\n    (global-set-key [f11] 'magit-status )\n    (global-set-key [(shift meta f11)] 'vc-next-action)\n    ))\n (t ;; fallback to VC bindings\n  (progn\n    (global-set-key [f11] 'vc-next-action )\n    (global-set-key [(shift f11)] 'vc-annotate )\n    (global-set-key [(control f11)] 'vc-directory )\n    (global-set-key [(meta f11)] 'vc-version-diff )\n    (global-set-key [(shift meta f11)] 'function-key-error)\n    ))\n )\n\n\n\n\n\n;;(define-key speedbar-key-map [button1] 'dframe-click)\n\n\n;; ---( F12: Frames )----------------------------------------------------\n\n(global-set-key [f12] 'make-frame )\n(global-set-key [(control f12)] 'delete-frame )\n(global-set-key [(shift f12)] 'buffer-menu )\n(global-set-key [(meta f12)] 'revert-buffer )\n(global-set-key [(shift meta f12)] 'function-key-error)\n\n\n\n\n\n\n;; ============================================\n;; ---( Numeric Keypad )-----\n;; ============================================\n\n;; ---( center )--------------------------------------------------\n\n(define-key global-map [begin]\t'recenter)\n(define-key global-map [(control kp-begin)] '(lambda () (interactive) (recenter 0)))\n\n;; ---( comment )----------------------------------------------------\n\n(define-key global-map [(control kp-divide)]\t'comment-region)\n(define-key global-map [(meta kp-divide)]\t'uncomment-region)\n\n;; ---( rect )----------------------------------------------------\n\n(define-key global-map [(control kp-add)] 'kill-rectangle)\n(define-key global-map [(control kp-subtract)] 'delete-rectangle)\n(define-key global-map [(control kp-enter)] 'yank-rectangle)\n(global-set-key [kp-subtract]\n  '(lambda () (interactive)\n\t  (copy-rectangle-to-register ?r (region-beginning) (region-end) t )))\n(global-set-key [kp-add]\n  '(lambda () (interactive)\n\t  (copy-rectangle-to-register ?r (region-beginning) (region-end))))\n(global-unset-key [kp-enter])\n(global-set-key [kp-enter]\n  '(lambda () (interactive)\n\t  (insert-register ?r)\n\t  (let ((col (current-column)))\n\t\t (forward-line)\n\t\t (move-to-column col t))))\n(global-set-key [(meta kp-enter)]\n  '(lambda () (interactive)\n\t  (insert-register ?r)))\n\n;; ---( edit )----------------------------------------------------\n\n(define-key global-map [kp-insert]\t'yank)\n(define-key global-map [(control kp-insert)]\t'kill-ring-save)\n(define-key global-map [(meta kp-insert)]\t'overwrite-mode)\n\n(define-key global-map [kp-delete]\t'delete-char)\n(define-key global-map [(control kp-delete)]\t'kill-region)\n;; (define-key global-map [(meta kp-delete)]\t'delete-frame)\n\n(define-key global-map [kp-end]\t'bs-show)\n(define-key global-map [kp-home]\t'delete-other-windows)\n\n(define-key global-map [(control kp-home)]\t'dired)\n(define-key global-map [(control kp-end)]\t'kill-this-buffer)\n\n(define-key global-map [(meta kp-home)]\t'make-frame)\n(define-key global-map [(meta kp-end)]\t'delete-frame)\n\n;; ---( scroll )----------------------------------------------------\n\n(define-key global-map [kp-left]\t'backward-word)\n(define-key global-map [kp-right]\t'forward-word)\n(define-key global-map [(control kp-left)]\t'scroll-left)\n(define-key global-map [(control kp-right)]\t'scroll-right)\n(define-key global-map [kp-up]\t'scroll-down-one)\n(define-key global-map [kp-down]\t'scroll-up-one)\n\n(define-key global-map [kp-multiply]\t'scroll-left)\n\n\n;; ---( WM )----------------------------------------------------\n\n(define-key global-map [(control kp-prior)]\t'shrink-window)\n(define-key global-map [(control kp-next)]\n  '(lambda () (interactive) (shrink-window -1)))\n(define-key global-map [(meta kp-prior)]\n  '(lambda () (interactive) (set-frame-height (selected-frame) (- (frame-height) 1))))\n(define-key global-map [(meta kp-next)]\n  '(lambda () (interactive) (set-frame-height (selected-frame) (+ (frame-height) 1))))\n(define-key global-map [(control meta kp-prior)]\n  '(lambda () (interactive) (set-frame-width (selected-frame) (- (frame-width) 1))))\n(define-key global-map [(control meta kp-next)]\n  '(lambda () (interactive) (set-frame-width (selected-frame) (+ (frame-width) 1))))\n\n\n(progn\n  (define-key global-map [(control meta kp-up)]\n    '(lambda () (interactive)\n       (set-frame-position (selected-frame)\n\t\t\t   (frame-parameter (selected-frame) 'left)\n\t\t\t   (- (frame-parameter (selected-frame) 'top) 5))))\n  (define-key global-map [(control meta kp-down)]\n    '(lambda () (interactive)\n       (set-frame-position (selected-frame)\n\t\t\t   (frame-parameter (selected-frame) 'left)\n\t\t\t   (+ (frame-parameter (selected-frame) 'top) 5))))\n  (define-key global-map [(control meta kp-left)]\n    '(lambda () (interactive)\n       (set-frame-position (selected-frame)\n\t\t\t   (- (frame-parameter (selected-frame) 'left) 5)\n\t\t\t   (frame-parameter (selected-frame) 'top))))\n  (define-key global-map [(control meta kp-right)]\n    '(lambda () (interactive)\n       (set-frame-position (selected-frame)\n\t\t\t   (+ (frame-parameter (selected-frame) 'left) 5)\n\t\t\t   (frame-parameter (selected-frame) 'top))))\n  )\n\n\n\n;; ============================================\n;; ---( ASCII Keys )-----\n;; ============================================\n\n;; ---( US-Keyboard )-----------------------------------------------------\n\n(keyboard-translate 176 ?{ ) ;; -es\n(keyboard-translate 167 ?} ) ;; par\n(keyboard-translate 163 ?` ) ;; �\n(keyboard-translate 231 ?~ ) ;; ced\n\n\n;; ============================================\n;; ---( Control Keys )-----\n;; ============================================\n\n;; ---( Undo )------------------------------------------------------------\n\n(define-key global-map \"\\C-z\" 'undo)\n\n\n;; ---( Compile )------------------------------------------------------------\n\n(global-set-key \"\\C-cc\" 'mode-compile)\n(global-set-key \"\\C-c\\C-c\" 'mode-compile)\n(global-set-key \"\\C-cq\" 'mode-compile-kill)\n(global-set-key \"\\C-b\" \n    '(lambda () (interactive)\n       (mode-compile)))\n\n;; ---( Search )------------------------------------------------------------\n\n(global-set-key \"\\C-f\" 'occur)\n\n\n\n;; ============================================\n;; ---( ESC-Maps Keys )-----\n;; ============================================\n\n;; ---( Numeric )--------------------------------------------------------\n\n(define-key esc-map \"1\" 'color-theme-select )\n(define-key esc-map \"2\" 'ergo-font-select )\n(define-key esc-map \"3\" 'bury-buffer)\n(define-key esc-map \"4\" 'delete-other-windows)\n(define-key esc-map \"5\" 'other-frame )\n(define-key esc-map \"6\" 'other-window )\n(define-key esc-map \"7\" 'ergo-font-small-frame ) ;;mouse-set-font\n(define-key esc-map \"8\" 'speedbar )\n(define-key esc-map \"9\" 'describe-mode )\n(define-key esc-map \"0\" 'delete-other-windows )\n\n\n;; ---( Jump )------------------------------------------------------------\n\n(define-key esc-map \"n\" 'goto-line )\n\n;; ---( CUA Clipboard )---------------------------------------------------\n\n(define-key esc-map \"c\" 'kill-ring-save )\n(define-key esc-map \"v\" 'yank )\n(define-key esc-map \"z\" 'kill-region )\n\n\n;; ---( Misc )------------------------------------------------------------\n\n(define-key esc-map \"o\" 'dired-other-frame )\n\n\n;; ---( meta f )----------------------------------------------------------\n\n(global-unset-key [(meta f)])\n(define-prefix-command 'z-meta-f-prefix)\n(defvar z-meta-f-map (symbol-function 'z-meta-f-prefix))\n(define-key global-map [(meta f)] 'z-meta-f-prefix)\n\n(define-key z-meta-f-map [s] 'save-buffer)\n(define-key z-meta-f-map [(meta s)] 'save-buffer)\n(define-key z-meta-f-map [v]\n  '(lambda ()\n     (interactive) (save-some-buffers t)) )\n(define-key z-meta-f-map [(meta v)]\n  '(lambda ()\n     (interactive) (save-some-buffers t)) )\n\n\n;; ============================================\n;; ---( Mode-Map Keys )-----\n;; ============================================\n\n;; ---( bookmark )--------------------------------------------------------\n\n(define-key bookmark-map [return] 'bookmark-bmenu-select)\n\n\n\n\n\n\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @LAYOUT\n;;;////////////////////////////////////////////////////////////////\n\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n(cond  ;;--- XEmacs ---------------------------------------------------\n ((eq system-type 'windows-nt) ;; WinNT\n  (cond\n   (t\n    (progn\n      (setq default-frame-alist\n\t    '(\n\t      (top . 50)\n\t      ;; (left . 40)\n\t      (width . 85)\n\t      (height . 40)\n\t      (background-color . \"#303010\")\n\t      (background-mode . dark)\n\t      (foreground-color . \"cornsilk\")\n\t      (border-color . \"black\")\n\t      (cursor-color . \"white\")\n\t      (mouse-color . \"black\")\n\t      ;; (font . \"-*-Andale Mono-normal-r-*-*-11-*-*-*-c-*-iso8859-1\")\n\t      ;; (font . \"-*-Lucida Sans Typewriter-normal-r-*-*-11-*-*-*-c-*-iso8859-1\")\n\t      (font . \"-*-Lucida Sans Unicode-normal-r-*-*-16-*-*-*-c-*-iso8859-1\")\n\n\t      )\n\t    )\n\n      (setq color-theme-is-global t)\n      (color-theme-z-gnome3)\n      (setq color-theme-is-global nil)\n      (color-theme-z-gnome3-d)            ;; default\n      (setq initial-frame-alist\n\t    (append\n\t     '(\n\t       (top . 30)\n\t       (left . 355)\n\t       (width . 88)\n\t       (height . 45)\n\t       ;; (height . 49)\n\t       ;; (background-color . \"#1A4F15\" )\n\t       ;; (foreground-color . \"#CDE7CD\" )\n\t       ;; (cursor-color . \"red\")\n\t       ;; (border-color . \"blue\")\n\t       (background-color . \"#203030\")\n\t       ;; (foreground-color . \"#00D0D0\")\n\t       (foreground-color . \"#CDE7CD\" )\n\t       (cursor-color . \"red\")\n\t       (border-color . \"white\")\n\t       ;; (border-color . \"#00007F\")\n\n\n\t       ;; (font . \"-*-Raize-normal-r-normal-normal-16-120-96-96-c-90-iso8859-15\")\n\t       ;; (font . \"-*-SimSun-normal-r-*-*-16-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-*-r_ansi-normal-r-*-*-16-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-*-Need Glasses ?-normal-r-*-*-18-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-outline-VAG Rounded Light-normal-r-normal-normal-19-142-96-96-p-90-iso10646-1\")\n\t       ;; (font . \"-*-r_ansi-normal-r-*-*-14-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-*-Andale Mono-normal-r-*-*-14-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-*-Letter Gothic 12 Pitch BT-normal-r-*-*-15-*-*-*-c-*-iso8859-1\")\n\t       (font . \"-bitstream-bitstream vera sans mono-normal-r-*-*-18-*-*-*-c-*-iso8859-1\")\n\n\t       )\n\t     initial-frame-alist ))\n      )\n    )))\n ((eq system-type 'cygwin);; GNU-Cygwin\n  (cond\n   ((string= (getenv \"DISPLAY\") \":9.9\")\n    (progn\n\n      )\n    )\n   (t\n    (progn\n      (setq default-frame-alist\n\t    '(\n\t      (top . 60)\n\t      (left . 40)\n\t      (width . 90)\n\t      (height . 50)\n\t      (background-color . \"#002035\")\n\t      (background-mode . dark)\n\t      (foreground-color . \"cornsilk\")\n\t      (border-color . \"black\")\n\t      (cursor-color . \"white\")\n\t      (mouse-color . \"black\")\n\t      (font . \"-b&h-lucidatypewriter-medium-r-normal-*-*-120-*-*-m-*-iso8859-9\")\n\t      )\n\t    )\n\n\n      (setq color-theme-is-global t)\n      (color-theme-z-gnome3)            ;; default\n\n      ;; #ifdef COLOR\n      ;; *customization: -color\n      ;; #endif\n      ;;\n      ;; !!emacs*Foreground: Wheat\n      ;; !!emacs*Background: Gray10\n      ;; !!emacs*Foreground: Wheat\n      ;; !!emacs*Background: DarkSlateGray\n      ;; !!emacs*Foreground: Ivory3\n      ;; !!emacs*Background: MidnightBlue\n      ;; !!emacs*Foreground: DarkSeaGreen3\n      ;; !!emacs*Background: Gray13\n      ;; !!emacs*Foreground: PowderBlue\n      ;; !!emacs*Background: Gray10\n      ;; !!emacs*reverseVideo: on\n      ;; emacs*pointerColor: Orchid\n      ;; emacs*cursorColor: Orchid\n      ;; emacs*bitmapIcon: on\n      ;; !!emacs*font: -misc-screen-medium-R-normal--14-120-78-78-C-90-ISO8859-7\n      ;; !!emacs*font: -greek-smserif-medium-r-semicondensed-*-*-160-*-*-m-*-iso8859-7\n      ;; !!emacs*font: 10x20\n      ;; !!emacs*font: -Sun-Serif-Medium-R-Normal-Serif-16-160-72-72-M-90-ISO8859-1\n      ;; !!emacs*font: -adobe-courier-bold-r-normal--*-140-*-*-m-*-iso8859-1\n      ;; emacs*font: -B&H-LucidaTypewriter-Medium-R-Normal-Sans-12-120-75-75-M-70-ISO8859-1\n      ;; emacs*menubar.font:-adobe-helvetica-bold-r-normal-*-*-120-*-*-*-*-*-*\n      ;; emacs.geometry: 80x25\n\n      (setq initial-frame-alist\n\t    '(\n\t      (top . 25)\n\t      (left . 310)\n\t      (width . 85)\n\t      (height . 52)\n\t      ( background-color . \"#103045\" )\n\t      ( foreground-color . \"LightCyan1\" )\n\t      ( cursor-color . \"Yellow\")\n\t      ( background-mode . dark)\n\t      (font . \"-b&h-lucidatypewriter-medium-r-normal-*-*-140-*-*-m-*-iso8859-9\")\n\t      ))\n\n      (setq color-theme-is-global nil)\n      (color-theme-z-gnome3-d)            ;; default\n\n      )\n    )))\n ((eq system-type 'linux);; GNU-Linux\n  (cond\n   ((string= (getenv \"DISPLAY\") \":9.9\")\n    (progn\n\n      )\n    )\n   (t\n    (progn\n      (setq default-frame-alist\n\t    '(\n\t      (top . 73)\n\t      (left . 30)\n\t      (width . 90)\n\t      (height . 58)\n\t      ;;(background-color . \"#002035\")\n\t      (background-mode . dark)\n\t      ;;(foreground-color . \"cornsilk\")\n\t      (border-color . \"RoyalBlue\")\n\t      (cursor-color . \"yellow\")\n\t      (mouse-color . \"red\")\n\t      ;;(font . \"-b&h-lucida-medium-r-*-*-12-*-*-*-*-*-*-*\")\n\t      (font . \"-misc-fixed-medium-r-normal--15-*-*-*-*-*-*-*\")\n\t      (top-toolbar-shadow-color \"#fffffbeeffff\")\n\t      (bottom-toolbar-shadow-color \"green\" )\n\t      (background-toolbar-color \"coral\")\n\t      ;;(bottom-toolbar-shadow-color \"#79e77df779e7\" )\n\t      ;;(background-toolbar-color \"#cf3ccf3ccf3c\")\n\n\t      )\n\t    )\n\n\n      (setq color-theme-is-global t)\n      (color-theme-z-gnome)            ;; default\n\n      ;; #ifdef COLOR\n      ;; *customization: -color\n      ;; #endif\n      ;;\n      ;; !!emacs*Foreground: Wheat\n      ;; !!emacs*Background: Gray10\n      ;; !!emacs*Foreground: Wheat\n      ;; !!emacs*Background: DarkSlateGray\n      ;; !!emacs*Foreground: Ivory3\n      ;; !!emacs*Background: MidnightBlue\n      ;; !!emacs*Foreground: DarkSeaGreen3\n      ;; !!emacs*Background: Gray13\n      ;; !!emacs*Foreground: PowderBlue\n      ;; !!emacs*Background: Gray10\n      ;; !!emacs*reverseVideo: on\n      ;; emacs*pointerColor: Orchid\n      ;; emacs*cursorColor: Orchid\n      ;; emacs*bitmapIcon: on\n      ;; !!emacs*font: -misc-screen-medium-R-normal--14-120-78-78-C-90-ISO8859-7\n      ;; !!emacs*font: -greek-smserif-medium-r-semicondensed-*-*-160-*-*-m-*-iso8859-7\n      ;; !!emacs*font: 10x20\n      ;; !!emacs*font: -Sun-Serif-Medium-R-Normal-Serif-16-160-72-72-M-90-ISO8859-1\n      ;; !!emacs*font: -adobe-courier-bold-r-normal--*-140-*-*-m-*-iso8859-1\n      ;; emacs*font: -B&H-LucidaTypewriter-Medium-R-Normal-Sans-12-120-75-75-M-70-ISO8859-1\n      ;; emacs*menubar.font:-adobe-helvetica-bold-r-normal-*-*-120-*-*-*-*-*-*\n      ;; emacs.geometry: 80x25\n\n      (setq initial-frame-alist\n\t    '(\n\t      (top . 40)\n\t      (left . 320)\n\t      (width . 90)\n\t      (height . 55)\n\t      ;;( background-color . \"#103045\" )\n\t      ;;( foreground-color . \"LightCyan1\" )\n\t      ( cursor-color . \"Yellow\")\n\t      ( background-mode . dark)\n\t      ;; (font . \"-xos4-terminus-medium-r-*-*-17-*-*-*-*-*-*-1\")\n\t      ;; (font . \"-artwiz-fkp-*-*-*-*-17-*-*-*-*-*-*-*\")\n\t      (font . \"-misc-fixed-medium-r-normal--15-*-*-*-*-*-*-*\")\n\t      ))\n\n      (setq color-theme-is-global nil)\n      (color-theme-z-gnome2)            ;; default\n      )\n    )))\n ((eq system-type 'usg-unix-v);; Sun Solaris\n  (cond\n   ((string= (getenv \"DISPLAY\") \":0.0\")\n    (progn\n      )\n    )\n   (t\n    (progn\n      )\n    )))\n )\n\n\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n\n\n\n\n(cond  ;;--- FSF-Emacs ---------------------------------------------------\n ((eq system-type 'windows-nt) ;; WinNT\n  (cond\n   (t\n    (progn\n      (setq default-frame-alist\n\t    '(\n\t      (top . 70)\n\t      ;; (left . 40)\n\t      (width . 85)\n\t      (height . 40)\n\t      (background-color . \"#303010\")\n\t      (background-mode . dark)\n\t      (foreground-color . \"cornsilk\")\n\t      (border-color . \"black\")\n\t      (cursor-color . \"white\")\n\t      (mouse-color . \"black\")\n\t      ;; (font . \"-*-Andale Mono-normal-r-*-*-11-*-*-*-c-*-iso8859-1\")\n\t      ;; (font . \"-*-Lucida Sans Typewriter-normal-r-*-*-11-*-*-*-c-*-iso8859-1\")\n\t      (font . \"-*-Lucida Sans Unicode-normal-r-*-*-16-*-*-*-c-*-iso8859-1\")\n\n\t      )\n\t    )\n\n      (setq color-theme-is-global t)\n      (color-theme-z-gnome3)\n      (setq color-theme-is-global nil)\n      (color-theme-z-gnome3-d)            ;; default\n      (setq initial-frame-alist\n\t    (append\n\t     '(\n\t       (top . 30)\n\t       (left . 355)\n\t       (width . 88)\n\t       (height . 46)\n\t       ;; (height . 49)\n\t       ;; (background-color . \"#1A4F15\" )\n\t       ;; (foreground-color . \"#CDE7CD\" )\n\t       ;; (cursor-color . \"red\")\n\t       ;; (border-color . \"blue\")\n\t       (background-color . \"#203030\")\n\t       ;; (foreground-color . \"#00D0D0\")\n\t       (foreground-color . \"#CDE7CD\" )\n\t       (cursor-color . \"red\")\n\t       (border-color . \"white\")\n\t       ;; (border-color . \"#00007F\")\n\n\n\t       ;; (font . \"-*-Raize-normal-r-normal-normal-16-120-96-96-c-90-iso8859-15\")\n\t       ;; (font . \"-*-SimSun-normal-r-*-*-16-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-*-r_ansi-normal-r-*-*-16-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-*-Need Glasses ?-normal-r-*-*-18-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-outline-VAG Rounded Light-normal-r-normal-normal-19-142-96-96-p-90-iso10646-1\")\n\t       ;; (font . \"-*-r_ansi-normal-r-*-*-14-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-*-Andale Mono-normal-r-*-*-14-*-*-*-c-*-iso8859-1\")\n\t       ;; (font . \"-*-Letter Gothic 12 Pitch BT-normal-r-*-*-15-*-*-*-c-*-iso8859-1\")\n\t       (font . \"-bitstream-bitstream vera sans mono-normal-r-*-*-18-*-*-*-c-*-iso8859-1\")\n\n\t       )\n\t     initial-frame-alist ))\n      )\n    )))\n ((eq system-type 'cygwin);; GNU-Cygwin\n  (cond\n   ((string= (getenv \"DISPLAY\") \":9.9\")\n    (progn\n\n      )\n    )\n   (t\n    (progn\n      (setq default-frame-alist\n\t    '(\n\t      (top . 60)\n\t      (left . 40)\n\t      (width . 90)\n\t      (height . 50)\n\t      (background-color . \"#002035\")\n\t      (background-mode . dark)\n\t      (foreground-color . \"cornsilk\")\n\t      (border-color . \"black\")\n\t      (cursor-color . \"white\")\n\t      (mouse-color . \"black\")\n\t      (font . \"-b&h-lucidatypewriter-medium-r-normal-*-*-120-*-*-m-*-iso8859-9\")\n\t      )\n\t    )\n\n\n      (setq color-theme-is-global t)\n      (color-theme-z-gnome3)            ;; default\n\n      ;; #ifdef COLOR\n      ;; *customization: -color\n      ;; #endif\n      ;;\n      ;; !!emacs*Foreground: Wheat\n      ;; !!emacs*Background: Gray10\n      ;; !!emacs*Foreground: Wheat\n      ;; !!emacs*Background: DarkSlateGray\n      ;; !!emacs*Foreground: Ivory3\n      ;; !!emacs*Background: MidnightBlue\n      ;; !!emacs*Foreground: DarkSeaGreen3\n      ;; !!emacs*Background: Gray13\n      ;; !!emacs*Foreground: PowderBlue\n      ;; !!emacs*Background: Gray10\n      ;; !!emacs*reverseVideo: on\n      ;; emacs*pointerColor: Orchid\n      ;; emacs*cursorColor: Orchid\n      ;; emacs*bitmapIcon: on\n      ;; !!emacs*font: -misc-screen-medium-R-normal--14-120-78-78-C-90-ISO8859-7\n      ;; !!emacs*font: -greek-smserif-medium-r-semicondensed-*-*-160-*-*-m-*-iso8859-7\n      ;; !!emacs*font: 10x20\n      ;; !!emacs*font: -Sun-Serif-Medium-R-Normal-Serif-16-160-72-72-M-90-ISO8859-1\n      ;; !!emacs*font: -adobe-courier-bold-r-normal--*-140-*-*-m-*-iso8859-1\n      ;; emacs*font: -B&H-LucidaTypewriter-Medium-R-Normal-Sans-12-120-75-75-M-70-ISO8859-1\n      ;; emacs*menubar.font:-adobe-helvetica-bold-r-normal-*-*-120-*-*-*-*-*-*\n      ;; emacs.geometry: 80x25\n\n      (setq initial-frame-alist\n\t    '(\n\t      (top . 25)\n\t      (left . 310)\n\t      (width . 85)\n\t      (height . 52)\n\t      ( background-color . \"#103045\" )\n\t      ( foreground-color . \"LightCyan1\" )\n\t      ( cursor-color . \"Yellow\")\n\t      ( background-mode . dark)\n\t      (font . \"-b&h-lucidatypewriter-medium-r-normal-*-*-140-*-*-m-*-iso8859-9\")\n\t      ))\n\n      (setq color-theme-is-global nil)\n      (color-theme-z-gnome3-d)            ;; default\n\n      )\n    )))\n ((eq system-type 'gnu/linux);; GNU-Linux\n  (cond\n   ((string= (getenv \"DISPLAY\") \":9.9\")\n    (progn\n\n      )\n    )\n   (t\n    (progn\n      (setq font-default (if (string-lessp emacs-version \"23.0\")\n;;\t\t\t\"-xos4-terminus-medium-r-*-*-15-*-*-*-*-*-*-1\"\n\t\t\t\"8x13\"\n\t\t\t\"monospace-10\"))\n      (setq default-frame-alist\n\t    (if (string-lessp emacs-version \"23.0\")\n;;; \t      (top . 80)\n;;; \t      (left . 30)\n;;\t      (background-color . \"#002035\")\n;;\t      (background-mode . dark)\n;;\t      (foreground-color . \"cornsilk\")\n;;\t      (border-color . \"black\")\n;;\t      (cursor-color . \"white\")\n;;\t      (mouse-color . \"black\")\n;;\t      (font . \"-b&h-lucida-medium-r-*-*-12-*-*-*-*-*-*-*\")\n\t      ;; (font . \"-misc-fixed-medium-r-normal--20-*-*-*-c-100-iso8859-1\")\n;;\t      (font . (if (string-lessp emacs-version \"23.0\")\n;;\t\t\t\"-xos4-terminus-medium-r-*-*-15-*-*-*-*-*-*-1\"\n;;\t\t\t\"monospace-10\"))\n\t    `(\n\t      (width . 85)\n\t      (height . 60)\n\t      (font . ,font-default)\n\t      )\n\t    `(\n\t      (width . 80)\n\t      (height . 45)\n\t      (font . ,font-default)\n\t      )\n\t    ))\n\n\n      (setq color-theme-is-global t)\n;;      (color-theme-jonadabian)            ;; default\n      (color-theme-z-gnome2)            ;; default\n\n      ;; #ifdef COLOR\n      ;; *customization: -color\n      ;; #endif\n      ;;\n      ;; !!emacs*Foreground: Wheat\n      ;; !!emacs*Background: Gray10\n      ;; !!emacs*Foreground: Wheat\n      ;; !!emacs*Background: DarkSlateGray\n      ;; !!emacs*Foreground: Ivory3\n      ;; !!emacs*Background: MidnightBlue\n      ;; !!emacs*Foreground: DarkSeaGreen3\n      ;; !!emacs*Background: Gray13\n      ;; !!emacs*Foreground: PowderBlue\n      ;; !!emacs*Background: Gray10\n      ;; !!emacs*reverseVideo: on\n      ;; emacs*pointerColor: Orchid\n      ;; emacs*cursorColor: Orchid\n      ;; emacs*bitmapIcon: on\n      ;; !!emacs*font: -misc-screen-medium-R-normal--14-120-78-78-C-90-ISO8859-7\n      ;; !!emacs*font: -greek-smserif-medium-r-semicondensed-*-*-160-*-*-m-*-iso8859-7\n      ;; !!emacs*font: 10x20\n      ;; !!emacs*font: -Sun-Serif-Medium-R-Normal-Serif-16-160-72-72-M-90-ISO8859-1\n      ;; !!emacs*font: -adobe-courier-bold-r-normal--*-140-*-*-m-*-iso8859-1\n      ;; emacs*font: -B&H-LucidaTypewriter-Medium-R-Normal-Sans-12-120-75-75-M-70-ISO8859-1\n      ;; emacs*menubar.font:-adobe-helvetica-bold-r-normal-*-*-120-*-*-*-*-*-*\n      ;; emacs.geometry: 80x25\n\n      (setq font-initial (if (string-lessp emacs-version \"23.0\")\n;;\t\t\t\"-xos4-terminus-medium-r-*-*-17-*-*-*-*-*-*-1\"\n\t\t\t\"10x20\"\n\t\t\t\"Inconsolata-12\"))\n     (setq initial-frame-alist\n;;\t      ( background-color . \"#103045\" )\n;;\t      ( background-color . \"#1f3f3f\" )\n;;\t      ( foreground-color . \"LightCyan1\" )\n;;\t      ( background-mode . dark)\n;;\t      (font . \"-xos4-terminus-medium-r-*-*-17-*-*-*-*-*-*-1\")\n\t      ;; (font . \"-artwiz-fkp-*-*-*-*-17-*-*-*-*-*-*-*\")\n\t      ;; (font . \"-misc-fixed-medium-r-normal--15-*-*-*-c-90-iso8859-1\")\n;;\t      (font . (if (string-lessp emacs-version \"23.0\")\n;;\t\t\t\"-xos4-terminus-medium-r-*-*-17-*-*-*-*-*-*-1\"\n;;\t\t\t\"monospace-12\"))\n\t   (if (string-lessp emacs-version \"23.0\")\n\t    `(\n\t      (top . 55)\n\t      (left . 350)\n\t      (width . 85)\n\t      (height . 45)\n\t      ( cursor-color . \"Yellow\")\n\t      (font . ,font-initial)\n\t      )\n\t    `(\n\t      (top . 55)\n\t      (left . 400)\n\t      (width . 90)\n\t      (height . 45)\n\t      ( cursor-color . \"Yellow\")\n\t      (font . ,font-initial)\n\t      )\n\t    ))\n\n      (setq color-theme-is-global nil)\n      (color-theme-z-gnome2)            ;; default\n;;      (color-theme-z-gnome3-d)            ;; default\n      )\n    )))\n ((eq system-type 'usg-unix-v);; Sun Solaris\n  (cond\n   ((string= (getenv \"DISPLAY\") \":0.0\")\n    (progn\n      )\n    )\n   (t\n    (progn\n      )\n    )))\n )\n\n\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n;;;\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @INTERNET\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( FTP )---------------------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n (customize-set-variable 'efs-generate-anonymous-password \"hute37@netscape.net\")\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  IDL (RSI)\n;;;////////////////////////////////////////////////////////////////\n\n\n;;(setq speedbar-supported-extension-expressions\n;;\t\t(cons \".pro\" speedbar-supported-extension-expressions))\n\n\n;; (setq auto-mode-alist (cons '(\"\\\\.pro\\\\'\" . idlwave-mode)\n;; \t\t\t    (cons '(\"\\\\.pro\\\\'\" . idlwave-mode) auto-mode-alist)))\n\n;; (add-hook 'idlwave-mode-hook\n;;           (function\n;;            (lambda ()\n;;              (local-unset-key [(meta backspace)])\n;;              )))\n\n;;;////////////////////////////////////////////////////////////////\n;;;  R\n;;;////////////////////////////////////////////////////////////////\n\n;; (if (eq z-location 'home)\n;;     (if (eq z-system 'windows-nt)\n;; \t(progn\n;; \t  (setq load-path (cons \"h:/usr/share/R/ess/ess-5.1.19/lisp\" load-path))\n;; \t  (require 'ess-site)\n;; \t  )))\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  AUCTEX\n;;;////////////////////////////////////////////////////////////////\n\n;; (if (eq z-location 'home)\n;;     (if (eq z-system 'winnt)\n;; \t(progn\n;; \t  (require 'tex-site)\n;; \t  ;;(setq-default TeX-master nil) ;-- Query for master file\n;; \t  ;;(setq-default TeX-master \"Thesis\") ;-- Fixed Master File\n;; \t  ;;(setq-default TeX-master \"Slider\") ;-- Fixed Master File\n;; \t  ;;(setq-default TeX-master \"Abstract\") ;-- Fixed Master File\n;; \t  (setq Tex-parse-self t) ; Parse on Load\n;; \t  (setq Tex-auto-save t) ; Parse on save\n;; \t  (setq outline-minor-mode-prefix \"\\C-o\") ; Outline minor Prefix\n;; \t  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)\n;; \t  )))\n\n;; (load \"preview-latex\")\n\n;;;////////////////////////////////////////////////////////////////\n;;;  IMAXIMA\n;;;////////////////////////////////////////////////////////////////\n\n (autoload 'imaxima \"imaxima\" \"Image support for Maxima.\" t)\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  Graphviz\n;;;////////////////////////////////////////////////////////////////\n\n(load \"graphviz-dot-mode\") \n\n;;;////////////////////////////////////////////////////////////////\n;;;  @PERL\n;;;////////////////////////////////////////////////////////////////\n\n;; ;; both prolog and perl files are often called .pl;\n;; ;; this tries to do the right thing.\n;; (defun prolog-or-perl-mode () (interactive)\n;;   (if\n;;       (or (string-match \"/perl\\\\b\" (buffer-string)) ; file with perl header\n;;           (= 1 (point-max)))            ; new file\n;;       (progn\n;;         (cperl-mode)\n;;         (message \"Ambiguous suffix .pl resolved to perl mode.\"))\n;;     (progn\n;;       (prolog-mode)\n;;       (message \"Ambiguous suffix .pl resolved to prolog mode.\")))\n;;   (sit-for 1))\n\n\n\n;; (autoload 'perl-mode \"cperl-mode\" \"alternate mode for editing Perl programs\" t)\n;; (setq cperl-hairy t)\n;; (setq cperl-indent-level 4)\n;; (setq auto-mode-alist\n;;       (append '((\"\\\\.\\\\([pP][Llm]\\\\|al\\\\)$\" . perl-mode))  auto-mode-alist ))\n\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n\n;; ;;; [[TINY PERL]]\n\n;;(require 'tinyperl)\n(autoload 'turn-on-tinyperl-mode  \"tinyperl\" \"\" t)\n(add-hook 'perl-mode-hook  'turn-on-tinyperl-mode)\n(add-hook 'cperl-mode-hook 'turn-on-tinyperl-mode)\n\n;; Use cperl-mode instead of the default perl-mode\n(add-to-list 'auto-mode-alist '(\"\\\\.\\\\([pP][Llm]\\\\|al\\\\)\\\\'\" . cperl-mode))\n(add-to-list 'interpreter-mode-alist '(\"perl\" . cperl-mode))\n(add-to-list 'interpreter-mode-alist '(\"perl5\" . cperl-mode))\n(add-to-list 'interpreter-mode-alist '(\"miniperl\" . cperl-mode))\n(add-to-list 'auto-mode-alist '(\"\\\\.pod\\\\'\" . tinyperl-pod-view-mode))\n\n(add-hook 'cperl-mode-hook 'my-cperl-mode-hook t)\n(defun my-cperl-mode-hook ()\n  \"Perl mode customizations, M-h for perl help.\"\n  (interactive)\n  (require 'cperl-mode)\n  (require 'tinyperl)\n  \n  ;; ---( F1: Help )---------------------------------------------------------\n\n  (local-set-key  [f1] 'cperl-info-on-command ) ;;cperl redefined\n  (local-set-key [(shift f1)] 'tinyperl-pod-by-manpage ) \n  (local-set-key  [(control f1)] 'tinyperl-pod-by-module )\n  ;; (define-key global-map '[(meta f1)]\t'ergo-font-select)\n  (local-set-key  [(shift meta f1)] 'tinyperl-pod-grep)\n\n  ;; ---( Return )---------------------------------------------------------\n\n  (local-set-key [(control return)] 'tinyperl-module-find-file )\n\n  ;; ---( F9: Debug )---------------------------------------------------------\n\n  (local-set-key [f9] 'perldb )\n\n;;   (mosh-map-local-keys\n;;      [(control up  )]   'mosh-prev-perl   ; perl-beginning-of-function\n;;      [(control down)]   'mosh-next-perl   ; perl-end-of-function\n;;      [(control ?j  )]   'cperl-linefeed\n;;      [(alt   ?h    )]   'cperl-get-help\n;;      [(super ?h    )]   'cperl-info-on-current-command\n;;      [(meta  ?h    )]   'cperl-info-on-current-command ; M-h was mark-paragraph\n;;      [(hyper ?h    )]   'cperl-info-on-command\n;;      [       return ]   'newline-and-indent\n;;      [\\e ?\\;        ]   'cperl-indent-for-comment\n;;      [\\e tab        ]   'cperl-indent-for-comment\n;;   )\n\n;;   (setq\n;;         cperl-info-page         \"Perl5\"\n;;         cperl-indent-level      4\n;;         cperl-font-lock         t\n;;         cperl-brace-offset     -2  ; puts '{' in same col as '}'.\n;;       ; cperl-hairy             t\n;;   )\n;;   ; (font-lock-mode t)\n\n  (message \"my-cperl-mode-hook loaded\")\n)\n\n\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @XML\n;;;////////////////////////////////////////////////////////////////\n\n\n;; ---( nXML )---------------------------------------------------------\n\n(cond\n ((eq z-emacs-type 'xemacs) ;; XEmacs\n  (progn\n\n    ))\n ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n  (progn\n\n\n\n\n(cond\n ((eq system-type 'windows-nt) ;; WinNT\n  (progn\n    (setq load-path (cons \"d:/opt/emacs/emacs/site-lisp/nxml\" load-path))\n    (load \"rng-auto.el\")\n    ))\n ((eq system-type 'cygwin);; GNU-Cygwin\n  (progn\n   ;; (server-start)\n    ))\n ((eq system-type 'TODO-gnu/linux);; GNU-Linux\n  (progn\n    (require 'nxml-mode)\n    ))\n ((eq system-type 'usg-unix-v);; Sun Solaris\n  (progn\n    ))\n (t\n  (progn\n    ))\n )\n\n(setq auto-mode-alist\n      (cons '(\"\\\\.\\\\(xml\\\\|xsl\\\\|rng\\\\|xhtml\\\\)\\\\'\" . nxml-mode)\n\t    auto-mode-alist)) \n\n\n\n\n    ))\n (t\n  (progn\n    ))\n )\n\n\n\n\n\n;;; ;;;////////////////////////////////////////////////////////////////\n;;; ;;;  ICYCLE\n;;; ;;;////////////////////////////////////////////////////////////////\n\n;;; ;; ---( icycles )---------------------------------------------------------\n\n;;; (cond\n;;;  ((eq z-emacs-type 'xemacs) ;; XEmacs\n;;;   (progn\n;;;     ))\n;;;  ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n;;;   (progn\n\n\n\n;;; ;;; ;; loaded at end, to reuse keybindings\n;;; ;;; (setq icicle-mode nil) ; Prevent turning on Icicle mode.\n;;; ;;; (require 'icicles)\n;;; ;;; (require 'icicles)\n;;; ;;; (setq icicle-prompt-suffix \"\")\n\n\n\n\n\n;;;     ))\n;;;  (t\n;;;   (progn\n;;;     ))\n;;;  )\n\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @END\n;;;////////////////////////////////////////////////////////////////\n\n;; ---( completed )---------------------------------------------------------\n\n;; (cond\n;;  ((eq z-emacs-type 'xemacs) ;; XEmacs\n;;   (progn\n;;   (message \"at end - completed\")\n;;     ))\n;;  ((eq z-emacs-type 'fsf_emacs);; GNU-Emacs\n;;   (progn\n;;     ))\n;; (t\n;;  (progn\n;;    ))\n;;  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;; ;;; [[PERL MODE]]\n;; ;; See lisp/cperl-mode-bad.el:1262 /^.if window-system/\n;; ;; cperl-array-face, cperl-hash-face\n\n\n;;;\n;;; #########################################################################################\n;;; #########################################################################################\n;;; ###\n;;; ###  @DEPRECATED\n;;; ###\n;;; #########################################################################################\n;;; #########################################################################################\n;;;\n\n\n\n;; ;;; [[PERL MODE]]\n;; ;; See lisp/cperl-mode-bad.el:1262 /^.if window-system/\n;; ;; cperl-array-face, cperl-hash-face\n\n;; (add-hook 'cperl-mode-hook 'mosh-perl-mode)\n\n;; (defun mosh-perl-mode ()\n;;   \"Perl mode customizations, M-h for perl help.\"\n;;   (interactive)\n;;   (require 'cperl-mode)\n\n;;   (mosh-map-local-keys\n;;      [(control up  )]   'mosh-prev-perl   ; perl-beginning-of-function\n;;      [(control down)]   'mosh-next-perl   ; perl-end-of-function\n;;      [(control ?j  )]   'cperl-linefeed\n;;      [(alt   ?h    )]   'cperl-get-help\n;;      [(super ?h    )]   'cperl-info-on-current-command\n;;      [(meta  ?h    )]   'cperl-info-on-current-command ; M-h was mark-paragraph\n;;      [(hyper ?h    )]   'cperl-info-on-command\n;;      [       return ]   'newline-and-indent\n;;      [\\e ?\\;        ]   'cperl-indent-for-comment\n;;      [\\e tab        ]   'cperl-indent-for-comment\n;;   )\n\n;;   (setq\n;;         cperl-info-page         \"Perl5\"\n;;         cperl-indent-level      4\n;;         cperl-font-lock         t\n;;         cperl-brace-offset     -2  ; puts '{' in same col as '}'.\n;;       ; cperl-hairy             t\n;;   )\n;;   ; (font-lock-mode t)\n;; )\n\n;; ;;; [[GDB/DEBUGGER]]\n\n;; (add-hook 'gdb-mode-hook 'mosh-gdb-mode)\n\n;; (defun mosh-gdb-mode ()\n;;   \"GDB mode customization, set it in the C++ file also!\"\n;;   (interactive)\n;;   (mosh-map-local-keys\n;;        [          up]  '(if (eobp) (comint-previous-input 1) (previous-line 1))\n;;        [        down]  '(if (eobp) (comint-next-input     1) (next-line     1))\n;;        [         f21]  'gud-next    ; Pause/break key.\n;;   )\n;;   (mosh-map-global-keys\n;;        [(hyper right)] 'gud-step    ; step into.\n;;        [(hyper down)]  'gud-next    ; step over to next stmt.\n;;        [(hyper left)]  'gud-finish  ; finish current function\n;;        [(hyper  f12)]  'gud-print   ; print object under cursor.\n\n;;        [(super left )] 'gud-up\n;;        [(super right)] 'gud-down\n;;   )\n;;   ; (load-file \"patches20.el\") ; for color arrow in gdb.\n;; )\n\n\n\n\n\n;; ;;; [[GNUS]]\n;; ; See http://www.cs.washington.edu/homes/voelker/ntemacs.html\n\n;; (setq gnus-select-method '(nntp \"nntp.maxim.net\"\n;;     (nntp-port-number 119)))\n\n;; ;;; [[SMTP]]\n;; (setenv \"MAILHOST\" \"smtp2.maxim.net\")    ; for POP3.\n;; (setq smtpmail-default-smtp-server \"smtp2.maxim.net\")\n;; (setq smtpmail-local-domain nil)\n;; (setq send-mail-function 'smtpmail-send-it)\n;; (require 'smtpmail)\n;; (if gnuemacs (require 'mailalias))\n\n;; ;;; [[RMAIL]]\n\n;; (defun mosh-rmail-hook ()\n;;   \"Rmail setup, RMAIL options only for saspc128.\"\n;;   (interactive)\n;;   (setq rmail-display-summary t)\n;;   (setq    rmail-primary-inbox-list '(\"po:mosh\") rmail-pop-password-required t)\n;;   (define-key rmail-summary-mode-map [kp-prior] 'scroll-other-window-down)\n;;   (define-key rmail-summary-mode-map [kp-next ]  'scroll-other-window  )\n;; )\n\n;; ;; mailcrypt options.\n;; (if (file-readable-p (concat emacs_dir \"/lisp/mailcrypt.el\"))\n;;     (progn\n;;       (require 'mailcrypt)\n;;       (add-hook 'rmail-mode-hook 'mc-install-read-mode)\n;;       (add-hook 'rmail-summary-mode-hook 'mc-install-read-mode)\n;;       (add-hook 'mail-setup-hook 'mc-install-write-mode)\n;;       ;; (setq mc-remailer-pseudonyms '(\"Elvis Presley\" \"Vanna\"))\n;;     )\n;; )\n\n\n\n;; ;;; [[DESKTOP/SAVEPLACE]]\n;; (require 'desktop)\n\n;; (setq desktop-missing-file-warning nil)\n;; (setq desktop-basefilename  \"hist/emacs.dsk\")\n\n;; (setq desktop-globals-to-save (list\n;;     'command-history\n;;     'extended-command-history\n;;     'file-name-history\n;;     'shell-command-history\n;; ))\n\n;; (desktop-load-default)\n;; (desktop-read)\n;; (add-hook 'kill-emacs-hook\n;;           'mosh-desktop-save\n;;           'bookmark-save)\n\n;; (defun mosh-desktop-save () (desktop-save \"~/\"))\n\n\n\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;\n;;;////////////////////////////////////////////////////////////////\n\n\n;; ---( elib )---------------------------------------------------------\n\n;; (if  (eq z-emacs-type 'fsf_emacs) ;; Emacs\n;; \t (if (eq z-location 'home)\n;; \t\t  (progn\n;; \t\t\t (setq load-path (cons \"h:/usr/share/emacs-21.1/site-lisp/elib\" load-path))\n;; \t\t\t )))\n\n;; ---( PC Select )-----------------------------------------------------------\n\n\n;; (if  (eq z-emacs-type 'xemacs) ;; XEmacs\n;; \t (progn\n;; \t\t(if  (eq system-type 'usg-unix-v) ;; Sun Solaris\n;; \t\t\t (progn\n;; \t\t\t\t(require 'pc-select)\n;; \t\t\t\t(pc-select-mode t)\n;; \t\t\t\t)\n\n;; \t\t  (progn\n;; \t\t\t ))\n;; \t\t)\n\n;;   (progn\n;; \t ))\n\n\n;; ---( Paren )--------------------------------------------------------\n\n;; (if  (eq z-emacs-type 'xemacs) ;; XEmacs\n;; \t (progn\n;; \t\t(require 'paren)\n;; \t\t;; Turn on paren mode - this highlight matching under point\n;; \t\t;; (show-paren-mode 1)\n;; \t\t;;(setq paren-mode nil)\n;; \t\t;;(setq paren-mode 'blink-paren)\n;; \t\t(setq paren-mode 'paren)\n;; \t\t;;(setq paren-mode 'sexp)\n;; \t\t(paren-activate)\n;; \t\t)\n\n;;   (progn\n;; \t (show-paren-mode)\n;; \t ))\n\n\n;; ;; Make the % key jump to the matching {}[]() if on another, like VI\n;; ;;(global-set-key \"%\" 'match-paren)\n;; (defun match-paren (arg)\n;;   \"Go to the matching parenthesis if on parenthesis otherwise insert %.\"\n;;   (interactive \"p\")\n;;   (cond ((looking-at \"\\\\s\\(\") (forward-list 1) (backward-char 1))\n;;         ((looking-at \"\\\\s\\)\") (forward-char 1) (backward-list 1))\n;;         (t (self-insert-command (or arg 1)))))\n\n\n;; ---( Diary )--------------------------------------------------------\n\n;; Tell emacs where my diary file is\n;; (setq diary-file \"~/diary/.diary\")\n\n\n\n\n\n; ;;;_ + escreen\n\n; (setq escreen-prefix-char [(control backspace)])\n\n; (load \"escreen\")\n\n; (escreen-install)\n\n; (add-hook 'escreen-goto-screen-hook\n; \t  (function\n; \t   (lambda ()\n; \t     (if (fboundp 'eshell-refresh-windows)\n; \t\t (eshell-refresh-windows)))))\n\n\n\n\n;; ;;; Dave Brennan <brennan@hal.com> has a copy; might as well forward\n;; ;;; him any improvements as well!\n;; (defun zzz-insert-braces ()\n;;   \"Insert matched braces, leave point inside.\"\n;;   (interactive \"*\")\n;;   (let (blink-paren-function) ;nil it temporarily\n;;     (execute-kbd-macro\n;;      (if (and (eq major-mode 'cc-c++-mode) (not (looking-at \";\")))\n;; \t \"{};\" \"{}\")))\n;;   (backward-sexp 1)\n;;   (if (save-excursion\n;; \t(forward-char -1)\n;; \t(looking-at \"\\\\$\"))\n;;       nil\n;;     (reindent-then-newline-and-indent)\n;;     (c-indent-exp)\n;;     (forward-char 1)\n;;     (newline-and-indent)))\n\n;; (defun self-insert-backquote ( )\n;;   \"insert backquote `.\"\n;;   (interactive)\n;;   (insert-char ?` 1))\n\n;; (defun self-insert-tilde ( )\n;;   \"insert tilde ~.\"\n;;   (interactive)\n;;   (insert-char ?~ 1))\n\n;; (defun self-insert-open-bracket ( )\n;;   \"inserisce carattere {.\"\n;;   (interactive)\n;;   (insert-char ?{ 1))\n\n;; (defun self-insert-close-bracket ( )\n;;   \"inserisce carattere }.\"\n;;   (interactive)\n;;   (insert-char ?} 1))\n\n;; (defvar accent-keys-bound nil\n;;   \"accent keys binding state.\")\n\n;; (defun accent-keys-toggle ( )\n;;   \"toggle accent keys binding.\"\n;;   (interactive)\n;;   (if (null accent-keys-bound)\n;;       (accent-keys-bind)\n;;     (accent-keys-unbind)))\n\n\n;; (defun accent-keys-full-bind ( )\n;;   \"enable accent keys binding.\"\n;;   (interactive)\n;;   (if  (eq z-emacs-type 'xemacs) ;; XEmacs\n;; \t\t(progn\n;; \t\t  (keyboard-translate ?? ?[ ) ;; ced\n;; \t\t  (keyboard-translate ?? ?] ) ;; -es\n;; \t\t  (keyboard-translate ?? ?{ ) ;; o'\n;; \t\t  (keyboard-translate ?? ?} ) ;; a'\n;; \t\t  (keyboard-translate ?? ?~ ) ;; i'\n;; \t\t  (keyboard-translate ?? ?` ) ;; e'\n;; \t\t  (keyboard-translate 232 ?` ) ;; e' gr\n;; \t\t  (global-set-key     (quote[249]) '(lambda () (interactive) (recenter 1)) ) ;; u'\n;; \t\t  (global-set-key     (quote[167]) 'recenter ) ;; par\n;; \t\t  (setq accent-keys-bound t)\n;; \t\t  )\n\n;; \t (progn\n;; \t\t  (keyboard-translate 231 ?[ ) ;; ced\n;; \t\t  (keyboard-translate 176 ?] ) ;; -es\n;; \t\t  (keyboard-translate 242 ?{ ) ;; o'\n;; \t\t  (keyboard-translate 224 ?} ) ;; a'\n;; \t\t  (keyboard-translate 236 ?~ ) ;; i'\n;; \t\t  (keyboard-translate 233 ?` ) ;; e'\n;; \t\t  (keyboard-translate 232 ?` ) ;; e' gr\n;; \t\t  (global-set-key     (quote[249]) '(lambda () (interactive) (recenter 1)) ) ;; u'\n;; \t\t  (global-set-key     (quote[167]) 'recenter ) ;; par\n;; \t\t  (setq accent-keys-bound t)\n;; \t\t)))\n\n\n;;(keyboard-translate 214 ?~ ) ;; C-�\n\n;; (defun accent-keys-tex-bind ( )\n;;   \"enable accent keys binding.\"\n;;   (interactive)\n;;   (if  (eq z-emacs-type 'xemacs) ;; XEmacs\n;; \t\t(progn\n;; \t\t  (keyboard-translate ?? ?{ ) ;; ced\n;; \t\t  (keyboard-translate ?? ?} ) ;; -es\n;; \t\t  (keyboard-translate ?? ?{ ) ;; o'\n;; \t\t  (keyboard-translate ?? ?} ) ;; a'\n;; \t\t  (keyboard-translate ?? ?~ ) ;; i'\n;; \t\t  (keyboard-translate ?? ?` ) ;; e'\n;; \t\t  (keyboard-translate 232 ?` ) ;; e' gr\n;; \t\t  (global-set-key     (quote[249]) '(lambda () (interactive) (recenter 1)) ) ;; u'\n;; \t\t  (global-set-key     (quote[167]) 'recenter ) ;; par\n;; \t\t  (setq accent-keys-bound t)\n;; \t\t  )\n\n;; \t (progn\n;; \t\t  (keyboard-translate 231 ?{ ) ;; ced\n;; \t\t  (keyboard-translate 176 ?} ) ;; -es\n;; \t\t  (keyboard-translate 167 ?` ) ;; -es\n;; \t\t  (keyboard-translate 163 ?~ ) ;; -es\n;; \t\t  (setq accent-keys-bound t)\n;; \t\t)))\n\n;; (defun accent-keys-unbind ( )\n;;   \"enable accent keys binding.\"\n;;   (interactive)\n;;   (keyboard-translate 231 231 ) ;; ced\n;;   (keyboard-translate 176 176 ) ;; -es\n;;   (keyboard-translate 242 242 ) ;; o'\n;;   (keyboard-translate 224 224 ) ;; a'\n;;   (keyboard-translate 236 236 ) ;; i'\n;;   (keyboard-translate 233 233 ) ;; e'\n;;   (keyboard-translate 232 232 ) ;; e' gr\n;;   (global-unset-key (quote[249]) ) ;; u'\n;;   (global-unset-key (quote[167]) ) ;; par\n;;   (setq accent-keys-bound nil))\n\n;; (if  (eq z-emacs-type 'xemacs) ;; XEmacs\n;; \t (progn\n;; \t\t(accent-keys-full-bind)\n;; \t\t)\n\n;;   (progn\n;;     (accent-keys-tex-bind)\n;; \t ))\n\n;; ;; cycle through buffers, ignoring uninteresting ones\n;; (defun z-backward-buffer () (interactive)\n;;   \"Switch to previously selected buffer.\"\n;;   (let* ((list (cdr (buffer-list)))\n;;          (buffer (car list)))\n;;     (while (and (cdr list) (string-match \"\\\\*\" (buffer-name buffer)))\n;;       (progn\n;;         (setq list (cdr list))\n;;         (setq buffer (car list))))\n;;     (bury-buffer)\n;;     (switch-to-buffer buffer)))\n\n\n;; (defun z-forward-buffer () (interactive)\n;;   \"Opposite of backward-buffer.\"\n;;   (let* ((list (reverse (buffer-list)))\n;;          (buffer (car list)))\n;;     (while (and (cdr list) (string-match \"\\\\*\" (buffer-name buffer)))\n;;       (progn\n;;         (setq list (cdr list))\n;;         (setq buffer (car list))))\n;;     (switch-to-buffer buffer)))\n\n\n;; (defun buffer-tab-find-prev-rec (buffer-list  prev-buffer)\n;;   (when buffer-list\n;; \t (if (aref (car buffer-list) 3)\n;; \t\t  prev-buffer\n;; \t\t(buffer-tab-find-prev-rec (cdr buffer-list) (car buffer-list))\n;; \t )\n;;   )\n;; )\n\n;; (defun buffer-tab-find-prev ()\n;;   (let ((buffer-list  ( buffers-tab-items )))\n;; \t (let ((prev-buffer (buffer-tab-find-prev-rec buffer-list nil)))\n;; \t (if prev-buffer\n;; \t\t  prev-buffer\n;; \t\t(car (last buffer-list))\n;; \t )))\n;;   )\n\n;; (defun buffer-tab-find-next-rec (buffer-list)\n;;   (when buffer-list\n;; \t (if (aref (car buffer-list) 3)\n;; \t\t  (cadr buffer-list)\n;; \t\t(buffer-tab-find-next-rec (cdr buffer-list))\n;; \t )\n;; ))\n\n;; (defun buffer-tab-find-next-z ()\n;;   (let ((buffer-list  ( buffers-tab-items )))\n;; \t (let ((next-buffer (buffer-tab-find-next-rec buffer-list)))\n;; \t (if next-buffer\n;; \t\t  next-buffer\n;; \t\t(last buffer-list))\n;; \t ))\n;;   )\n\n;; (defun buffer-tab-find-next () ;; buggy\n;;   (let ((buffer-list  (reverse  ( buffers-tab-items ))))\n;; \t (let ((prev-buffer (buffer-tab-find-prev-rec buffer-list nil)))\n;; \t (if prev-buffer\n;; \t\t  prev-buffer\n;; \t\t(car (last buffer-list))\n;; \t )))\n;;   )\n\n\n;; (defun buffer-tab-advance (&optional direction )\n;;   \"Switch to next/prev buffer in Buffer Tab List.\"\n;;   (interactive)\n;;   (let ((target-buffer\n;; \t\t (if direction\n;; \t\t\t  (buffer-tab-find-prev)\n;; \t\t\t(buffer-tab-find-next))))\n;; \t\t (eval (aref  target-buffer 1))))\n\n\n;; (defun toggle-modeline ()\n;;   (interactive)\n;;   (set-specifier\n;;    has-modeline-p\n;;    (not (specifier-instance has-modeline-p))))\n\n;; ;;@TODO: unused\n;; (defun toggle-modeline ()\n;;   (interactive)\n;;   )\n\n;;(mode-line)\n;;(vc-mode-line)\n\n;; (defun toggle-toolbar ()\n;;   (interactive)\n;;   (set-specifier\n;;    default-toolbar-visible-p\n;;    (not (specifier-instance default-toolbar-visible-p))))\n\n;; ;;@TODO: unused\n;; (defun toggle-toolbar ()\n;;   (interactive)\n;;   (tool-bar-mode))\n\n;; ;; ---( Gutter )-----------------------------------------------------------\n\n;; ;; Toggle Gutter Bar\n;; (if  (eq z-emacs-type 'xemacs) ;; XEmacs\n;; \t (defun toggle-gutter-bar ()\n;; \t\t\"Tabifies entire buffer.\"\n;; \t\t(interactive)\n;; \t(customize-set-variable 'gutter-buffers-tab-visible-p\n;; \t(not gutter-buffers-tab-visible-p))\n;; \t\t)\n;;   )\n\n;; (define-key global-map [kp-home]\t'scroll-cursor-to-bottom)\n;; (define-key global-map [kp-end]\t'scroll-cursor-to-top)\n;; (define-key global-map [kp-left]\t'backward-char-command)\n;; (define-key global-map [kp-right]\t'forward-char-command)\n;; (define-key global-map [(control kp-left)]\t'scroll-left)\n;; (define-key global-map [(control kp-right)]\t'scroll-right)\n;; (define-key global-map [kp-up]\t\t'scroll-down-one)\n;; (define-key global-map [kp-down]\t'scroll-up-one)\n;; (define-key global-map [kp-multiply]\t'scroll-left)\n\n;; (define-key global-map [kp-delete]\t'bury-buffer)\n;; (define-key global-map [(control kp-delete)]\t'kill-this-buffer)\n;; (define-key global-map [(control kp-insert)]\t'other-frame)\n;; (define-key global-map [(meta kp-insert)]\t'make-frame)\n;; (define-key global-map [(meta kp-delete)]\t'delete-frame)\n\n;; (require 'bs)\n;; (define-key global-map [kp-insert]\t'bs-show)\n\n\n;;(global-set-key [(control tab)] 'switch-to-other-buffer )\n;;(global-set-key [(control tab)]  '(lambda ()\n;;\t  (interactive) (buffer-tab-advance t)) )\n;;(global-set-key [(control meta tab)]  '(lambda ()\n;;\t  (interactive) (buffer-tab-advance t)) )\n;;(global-set-key [(control shift tab)]  '(lambda ()\n;;\t  (interactive) (buffer-tab-advance nil)) )\n\n;; better buffer cycling\n;; (global-set-key [(control return)] 'forward-buffer)\n;; (global-set-key [(shift return)]  'backward-buffer)\n\n\n\n\n;; (if  (eq z-emacs-type 'xemacs) ;; XEmacs\n;;  (progn\n;;    (define-key global-map [(control meta kp-end)]\t'toggle-line-wrapping)\n;; \t(setq truncate-lines t)\n;; \t)\n\n;;   (progn\n;; \t(define-key global-map [(control meta kp-end)]\t'toggle-truncate-lines)\n;; ;\t(toggle-truncate-lines)\n;;  ))\n\n;; =====================================================================\n;; =====================================================================\n;; Saving Emacs Sessions - Useful when you have a bunch of source\n;; files open and you don't want to go and manually open each one,\n;; especially when they are in various directories. Page 377 of the\n;; GNU Emacs Manual says: \"The first time you save the state of the\n;; Emacs session, you must do it manually, with the command M-x\n;; desktop-save. Once you have dome that, exiting Emacs will save the\n;; state again -- not only the present Emacs session, but also\n;; subsequent sessions. You can also save the state at any time,\n;; without exiting Emacs, by typing M-x desktop-save again.\n;; =====================================================================\n\n;;(load \"desktop\")\n;;(desktop-load-default)\n;;(desktop-read)\n\n;; ---( Desktop )--------------------------------------------------------\n\n;; (require 'desktop)\n;; (require 'desktop-menu)\n;; (global-set-key [(control f1)]\n;;  '(lambda () (interactive)\n;;  (and (yes-or-no-p \"Save Desktop?\")\n;; (desktop-save \"~/\"))))\n;; (global-set-key [(control f2)] 'desktop-read)\n\n;; add hook save on exit ?\n\n\n; ;;;_ + desktop\n\n; (load \"desktop\")\n; (load \"desktop-save\")\n\n; (defcustom initial-desktop-directory \"~/\"\n;   \"*The directory where the main desktop file is stored.\"\n;   :type 'file\n;   :group 'desktop)\n\n; (setq escreen-data-file\n;       (expand-file-name \".escreen\" initial-desktop-directory))\n\n; (add-hook 'desktop-save-hook 'escreen-save-state)\n; (add-hook 'desktop-save-hook 'escreen-save-current-screen-configuration)\n\n; (add-hook 'desktop-save-hook 'session-save-session)\n\n; (add-hook 'desktop-save-hook\n; \t  (function\n; \t   (lambda ()\n; \t     (if (fboundp 'eshell-save-some-history)\n; \t\t (eshell-save-some-history)))))\n\n; (add-hook 'desktop-save-hook\n; \t  (function\n; \t   (lambda ()\n; \t     (if (fboundp 'eshell-save-some-last-dir)\n; \t\t (eshell-save-some-last-dir)))))\n\n; (defun setup-desktop ()\n;   \"Setup Emacs by reading from a set of persistent state files.\"\n;   (add-hook\n;    'eshell-first-time-mode-hook\n;    (function\n;     (lambda ()\n;       (remove-hook 'kill-emacs-hook 'eshell-save-some-history)\n;       (remove-hook 'kill-emacs-hook 'eshell-save-some-last-dir))))\n\n;   (let ((default-directory initial-desktop-directory))\n;     (desktop-load-default)\n;     (desktop-read))\n\n;   (if (file-readable-p escreen-data-file)\n;       (escreen-restore-state escreen-data-file))\n\n;   (add-hook 'kill-emacs-hook\n; \t    (function\n; \t     (lambda ()\n; \t       (let ((buf (get-buffer \"*Process List*\")))\n; \t\t (when (and buf (buffer-live-p buf))\n; \t\t   (if (get-buffer-window buf)\n; \t\t       (delete-window (get-buffer-window buf)))\n; \t\t   (kill-buffer buf))))))\n\n;   (add-hook 'kill-emacs-hook 'kill-encrypted-buffers)\n\n;   (run-with-idle-timer (* 60 5)  t 'desktop-kill)\n;   (run-with-idle-timer (* 60 30) t 'desktop-kill))\n\n; (if (and (file-exists-p (concat initial-desktop-directory\n; \t\t\t\tdesktop-basefilename))\n; \t (null noninteractive))\n;     (add-hook 'after-init-hook 'setup-desktop))\n\n;;(setq bs-default-configuration \"files\")\n\n\n;;(global-set-key [(control f4)] 'untabify-buffer)\n;;(global-set-key [(meta f4)] 'tabify-buffer)\n;;(global-set-key [f5] 'tags-search)\n;;(global-set-key [(shift f5)] 'tags-query-replace)\n;;(global-set-key [(control f5)] 'list-tags)\n;;(global-set-key [(meta f5)] 'tags-apropos)\n;;(global-set-key [(control meta f5)] 'visit-tags-table)\n;; Hit f9 to force a re-fontify\n;;(global-set-key (quote [f9]) (quote font-lock-fontify-buffer))\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  @PRINT\n;;;////////////////////////////////////////////////////////////////\n\n;; This requires GhostScript which is available at this URL:\n;; http://www.cs.wisc.edu/~ghost/aladdin To print, just hit C-cp. This\n;; produces a file called printme.ps in the spool directory. Open this\n;; in GhostView and print from there. This works even on\n;; non-postscript printers.\n;;  --- (setq ps-printer-name \"~/spool/printme.ps\")\n;; --- (define-key global-map \"\\C-cp\" 'ps-print-buffer)\n\n;; Printing. For Windows, using w32-print. For Unix, using built-in.\n;; (defun z-print-setup () ;\n;; (if\n;;     ;; Win32\n;;     (eq system-type 'windows-nt)\n;;     (progn\n;;       (add-to-list 'load-path (concat my-site-lisp \"/w32-print-1.3\"))\n;;       (setq-default\n;;        ;; General\n;;        w32-print-use-faces nil\t\t; disable color, etc\n;;        w32-print-zap-spool-file t\t; delete temp file\n;;        w32-print-paper-type 'letter\n;;        w32-print-with-line-numbers t\n;;        w32-print-enable-keymappings nil ; disable keyboard shortcuts\n;;        ;; Postscript\n;;        w32-print-ps-preview nil\t\t; disable print preview\n;;        w32-print-ps-destination (if (eq my-location 'home)\n;; \t\t\t\t    \"lpt1\"\n;; \t\t\t\t  \"//romsvr1/hplj4050\")\n;;        w32-print-ps-text-font-size 14.0\n;;        w32-print-psnup-path (concat my-site-lisp \"/w32-print-1.3/bin\")\n;;        w32-print-psnup-margin \"0in\"\n;;        w32-print-psnup-enable t\n;;        ;; Ghostscript\n;;        w32-print-gs-destination (if (eq my-location 'home)\n;; \t\t\t\t    \"lpt1\"\n;; \t\t\t\t  \"//romsvr1/hplj4050\")\n;;        w32-print-gs-device (if (eq my-location 'home) \"deskjet\" \"ljet4\")\n;;        w32-print-gs-device-dpi (if (eq my-location 'home) '300 '600)\n;;        w32-print-gs-version \"6.01\"\n;;        w32-print-gs-path (concat my-gnu-home \"/ghostscript/gs6.01/bin\")\n;;        w32-print-gs-view-path (concat my-gnu-home \"/ghostscript/gsview\")\n;;        ;; Plain old printer\n;;        w32-print-lpr-destination (if (eq my-location 'home)\n;; \t\t\t\t     \"lpt1\"\n;; \t\t\t\t   \"//romsvr1/hplj4050\")\n;;        w32-print-lpr-path (concat my-site-lisp \"/w32-print-1.2/bin\")\n;;        )\n;;       ;; Let's use it\n;;       (load \"w32-print\")\n;;       )\n;;   ;; Unix system. Nothing to do since I can't print from unix.\n;;   ()\n;;   )\n;; )\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  C/C++\n;;;////////////////////////////////////////////////////////////////\n\n;;;_ + cc-mode\n\n;; (defconst borland-c-style\n;;   '((c-backslash-column\t\t   . 72)\n;;     (c-basic-offset\t\t   . 4)\n;;     (c-block-comment-prefix\t   . \"\")\n;;     (c-hanging-semi&comma-criteria . nil)\n;;     (c-comment-continuation-stars  . \"\")\n;;     (c-comment-only-line-offset    . 0)\n;;     (c-electric-pound-behavior\t   . (alignleft))\n;;     (c-cleanup-list\n;;      . (defun-close-semi list-close-comma scope-operator))\n;;     (c-hanging-colons-alist\n;;      . ((inher-intro)\n;; \t(member-init-intro before)\n;; \t(case-label after)\n;; \t(label after)\n;; \t(access-key after)))\n;;     (c-hanging-braces-alist\n;;      . ((brace-list-open before)\n;; \t(brace-list-close before)\n;; \t(substatement-open before)\n;; \t(substatement-case-open before)\n;; \t(else-clause before)\n;; \t(defun-open before)\n;; \t(defun-close before)\n;; \t(class-open before)\n;; \t(class-close before)\n;; \t(block-open after)\n;; \t(block-close before)\n;; \t(inline-open after)\n;; \t(inline-close before)))\n;;     (c-offsets-alist\n;;      . ((string                . c-lineup-dont-change)\n;; \t(c\t\t       . c-lineup-C-comments)\n;; \t(defun-open\t       . 0)\n;; \t(defun-close\t       . 0)\n;; \t(defun-block-intro     . +)\n;; \t(class-open\t       . 0)\n;; \t(class-close\t       . 0)\n;; \t(inline-open\t       . +)\n;; \t(inline-close\t       . 0)\n;; \t(func-decl-cont        . +)\n;; \t(knr-argdecl-intro     . +)\n;; \t(knr-argdecl\t       . 0)\n;; \t(topmost-intro\t       . 0)\n;; \t(topmost-intro-cont    . 0)\n;; \t(member-init-intro     . +)\n;; \t(member-init-cont      . 0)\n;; \t(inher-intro\t       . +)\n;; \t(inher-cont\t       . c-lineup-multi-inher)\n;; \t(block-open\t       . 0)\n;; \t(block-close\t       . 0)\n;; \t(brace-list-open       . 0)\n;; \t(brace-list-close      . 0)\n;; \t(brace-list-intro      . +)\n;; \t(brace-list-entry      . 0)\n;; \t(brace-entry-open      . 0)\n;; \t(statement-block-intro . +)\n;; \t(statement-case-intro  . +)\n;; \t(statement-case-open   . 0)\n;; \t(substatement\t       . +)\n;; \t(case-label\t       . 0)\n;; \t(access-label\t       . -)\n;; \t(label\t\t       . 2)\n;; \t(do-while-closure      . 0)\n;; \t(else-clause\t       . 0)\n;; \t(catch-clause\t       . 0)\n;; \t(comment-intro\t       . c-lineup-comment)\n;; \t(arglist-intro\t       . +)\n;; \t(arglist-cont\t       . 0)\n;; \t(arglist-close\t       . +)\n;; \t(stream-op\t       . c-lineup-streamop)\n;; \t(inclass\t       . +)\n;; \t(cpp-macro\t       . -1000)\n;; \t(cpp-macro-cont        . c-lineup-dont-change)\n;; \t(friend\t               . 0)\n;; \t(objc-method-intro     . -1000)\n;; \t(objc-method-args-cont . c-lineup-ObjC-method-args)\n;; \t(objc-method-call-cont . c-lineup-ObjC-method-call)\n;; \t(extern-lang-open      . 0)\n;; \t(extern-lang-close     . 0)\n;; \t(inextern-lang\t       . +)\n;; \t(namespace-open        . 0)\n;; \t(namespace-close       . 0)\n;; \t(innamespace\t       . +)\n;; ;\t(template-args-cont    . c-lineup-template-args)\n;; ;\t(inlambda\t       . c-lineup-inexpr-block)\n;; ;\t(lambda-intro-cont     . +)\n;; ;\t(inexpr-statement      . 0)\n;; ;\t(inexpr-class\t       . +)\n;; \t(arglist-cont-nonempty . c-lineup-arglist)\n;; \t(substatement-open     . 0)\n;; \t(statement\t       . c-lineup-runin-statements)\n;; \t(statement-cont        . c-lineup-runin-statements))))\n;;   \"Borland C programming style\")\n\n;; (defun my-c-mode-common-hook ()\n;;   (c-add-style \"borland\" borland-c-style t)\n;;   (c-set-style \"borland\")\n\n;;   (turn-on-auto-fill)\n;;   (set (make-local-variable 'fill-nobreak-predicate)\n;;        (function\n;; \t(lambda nil\n;; \t  (not (eq (get-text-property (point) (quote face))\n;; \t\t   (quote font-lock-comment-face))))))\n\n;;   (setq c-indent-comments-syntactically-p t\n;; \ttab-width 8 indent-tabs-mode t)\t; allow the use of tabs\n\n;;   (define-key c-mode-base-map \"\\C-m\" 'newline-and-indent)\n\n;;   (set (make-local-variable 'comment-start) \"// \")\n;;   (set (make-local-variable 'comment-end) \"\"))\n\n;; ;;(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)\n\n;;;////////////////////////////////////////////////////////////////\n;;;  PSGML/xslide\n;;;////////////////////////////////////////////////////////////////\n\n;; (if  (eq z-emacs-type 'fsf_emacs) ;; Emacs\n;; \t (if (eq z-location 'home-zzz-sgml)\n;; \t\t  (progn\n;; \t\t\t (setq load-path (cons \"h:/usr/share/emacs-21.1/site-lisp/psgml-1.2.5\" load-path))\n;; \t\t\t (autoload 'sgml-mode \"psgml\" \"Major mode to edit SGML files.\" t)\n;; \t\t\t (autoload 'xml-mode \"psgml\" \"Major mode to edit XML files.\" t)\n\n;; \t\t\t (setq load-path (cons \"h:/usr/share/emacs-21.1/site-lisp/xslide\" load-path))\n;; \t\t\t (autoload 'xsl-mode \"xslide\" \"Major mode for XSL stylesheets.\" t)\n\n;; \t\t\t (setq load-path (cons \"h:/usr/share/emacs-21.1/site-lisp/xslt-process-2.1/lisp\" load-path))\n;; \t\t\t (autoload 'xslt-process-mode \"xslt-process\" \"Emacs XSLT processing\" t)\n;; \t\t\t (autoload 'xslt-process-install-docbook \"xslt-process\"\n;; \t\t\t\t\"Register the DocBook package with XSLT-process\" t)\n;; \t\t\t (add-hook 'sgml-mode-hook 'xslt-process-mode)\n;; \t\t\t (add-hook 'xml-mode-hook 'xslt-process-mode)\n;; \t\t\t (add-hook 'xsl-mode-hook 'xslt-process-mode)\n;; \t\t\t (defadvice xml-mode (after run-xml-mode-hooks act)\n;; \t\t\t\t\"Invoke `xml-mode-hook' hooks in the XML mode.\"\n;; \t\t\t\t(run-hooks 'xml-mode-hook))\n\n;; \t\t\t (autoload 'css-mode \"css-mode\")\n;; \t\t\t (setq auto-mode-alist\n;; \t\t\t\t\t (cons '(\"\\\\.css\\\\'\" . css-mode) auto-mode-alist))\n\n\n;; \t\t\t ;; Turn on font lock when in XSL mode\n;; \t\t\t (add-hook 'xsl-mode-hook\n;; \t\t\t\t\t\t  'turn-on-font-lock)\n\n;; \t\t\t ;; Set up file-extension/mode associations.\n;; \t\t\t ;; Note that I use xml-mode for html... that's because i'm writing\n;; \t\t\t ;; XHTML and I want my html to conform to XML.\n;; \t\t\t (setq auto-mode-alist\n;; \t\t\t\t\t (append '(\n;; \t\t\t\t\t\t\t\t  (\"\\\\.sgml\" . sgml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.idd\" . sgml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.ide\" . sgml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.htm\" . sgml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.html\" . sgml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.xhtml\" . xml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.xml\" . xml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.xsd\" . xml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.xul\" . xml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.rdf\" . xml-mode)\n;; \t\t\t\t\t\t\t\t  ;;  (\"\\\\.xsl\" . xml-mode)\n;; \t\t\t\t\t\t\t\t  ;;  (\"\\\\.fo\" . xml-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.fo\" . xsl-mode)\n;; \t\t\t\t\t\t\t\t  (\"\\\\.xsl\" . xsl-mode)\n;; \t\t\t\t\t\t\t\t  )\n;; \t\t\t\t\t\t\t\tauto-mode-alist\n;; \t\t\t\t\t\t\t\t)\n;; \t\t\t\t\t )\n\n\n;; \t\t\t ;; Set up and enable syntax coloring.\n;; \t\t\t ;; Create faces  to assign markup categories.\n;; \t\t\t (make-face 'sgml-doctype-face)\n;; \t\t\t (make-face 'sgml-pi-face)\n;; \t\t\t (make-face 'sgml-comment-face)\n;; \t\t\t (make-face 'sgml-sgml-face)\n;; \t\t\t (make-face 'sgml-start-tag-face)\n;; \t\t\t (make-face 'sgml-end-tag-face)\n;; \t\t\t (make-face 'sgml-entity-face)\n\n;; \t\t\t ;; Assign attributes to faces. Background of white assumed.\n;; ;; \t\t\t (set-face-foreground 'sgml-doctype-face \"blue1\")\n;; ;; \t\t\t (set-face-foreground 'sgml-sgml-face \"cyan1\")\n;; ;; \t\t\t (set-face-foreground 'sgml-pi-face \"magenta\")\n;; ;; \t\t\t (set-face-foreground 'sgml-comment-face \"purple\")\n;; ;; \t\t\t (set-face-foreground 'sgml-start-tag-face \"Red\")\n;; ;; \t\t\t (set-face-foreground 'sgml-end-tag-face \"Red\")\n;; ;; \t\t\t (set-face-foreground 'sgml-entity-face \"Blue\")\n\n;; \t\t\t ;; Assign faces to markup categories.\n;; \t\t\t (setq sgml-markup-faces\n;; \t\t\t\t\t '((doctype\t. sgml-doctype-face)\n;; \t\t\t\t\t\t(pi\t\t. sgml-pi-face)\n;; \t\t\t\t\t\t(comment\t. sgml-comment-face)\n;; \t\t\t\t\t\t(sgml\t. sgml-sgml-face)\n;; \t\t\t\t\t\t(comment\t. sgml-comment-face)\n;; \t\t\t\t\t\t(start-tag\t. sgml-start-tag-face)\n;; \t\t\t\t\t\t(end-tag\t. sgml-end-tag-face)\n;; \t\t\t\t\t\t(entity\t. sgml-entity-face)))\n\n;; \t\t\t ;; PSGML - enable face settings\n;; \t\t\t (setq sgml-set-face t)\n\n;; \t\t\t ;; Auto-activate parsing the DTD when a document is loaded.\n;; \t\t\t ;; If this isn't enabled, syntax coloring won't take affect until\n;; \t\t\t ;; you manually invoke \"DTD->Parse DTD\"\n;; \t\t\t (setq sgml-auto-activate-dtd t)\n\n\n;; \t\t\t ;; Set up my \"DTD CATALOG\".\n;; \t\t\t ;; defined in \"/usr/local/lib/sgml/CATALOG.cat\"\n;; \t\t\t ;; (add-to-list 'sgml-catalog-files \"/usr/local/lib/sgml/HTML4/HTML4.cat\")\n;; \t\t\t ;; (add-to-list 'sgml-catalog-files \"/usr/local/lib/sgml/XHTML1/xhtml1.soc\")\n\n;; \t\t\t ;; Set up my \"DTD->Insert DTD\" menu.\n\n;; \t\t\t (setq sgml-custom-dtd '\n;; \t\t\t\t\t (\n;; \t\t\t\t\t  ( \"DITA concept\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE concept SYSTEM \\\"concept.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"DITA task\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE task SYSTEM \\\"task.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"DITA reftopic\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE reftopic SYSTEM \\\"reftopic.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"DITA APIdesc\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE APIdesc SYSTEM \\\"apidesc.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"DITA topic\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE topic SYSTEM \\\"ditabase.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"HOD Script\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE HASCRIPT SYSTEM \\\"HAScript.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"XHTML 1.0 Strict\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"xhtml1-strict.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"XHTML 1.0 Transitional\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"xhtml1-transitional.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"XHTML 1.0 Frameset\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Frameset//EN\\\" \\\"xhtml1-frameset.dtd\\\">\" )\n;; \t\t\t\t\t  ( \"HTML 4.01 Transitional\"\n;; \t\t\t\t\t\t \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\">\" )\n;; \t\t\t\t\t  ( \"HTML 4.01 Strict\"\n;; \t\t\t\t\t\t \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\">\" )\n;; \t\t\t\t\t  ( \"HTML 4.01 Frameset\"\n;; \t\t\t\t\t\t \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Frameset//EN\\\">\" )\n;; \t\t\t\t\t  ( \"IBMIDDoc\"\n;; \t\t\t\t\t\t \"<!DOCTYPE ibmiddoc PUBLIC \\\"+//ISBN 0-933186::IBM//DTD IBMIDDoc//EN\\\" [\\n]>\")\n;; \t\t\t\t\t  ( \"DOCBOOK XML 4.1.2\"\n;; \t\t\t\t\t\t \"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE book PUBLIC \\\"-//OASIS//DTD DocBook XML V4.1.2//EN\\\" \\\"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd\\\" [\\n]>\")\n;; \t\t\t\t\t  )\n;; \t\t\t\t\t )\n\n;; \t\t\t ;; From Lennart Staflin - re-enabling launch of browser (from original HTML mode)\n;; \t\t\t (defun my-psgml-hook ()\n;; \t\t\t\t(local-set-key \"\\C-c\\C-b\" 'browse-url-of-buffer)\n;; \t\t\t\t)\n\n;; \t\t\t (add-hook 'sgml-mode-hook 'my-psgml-hook)\n\n;; \t\t\t ;; Set up Validation support\n;; \t\t\t ;; First, for sgml-mode, if you always use the same declaration, uncomment\n;; \t\t\t ;; the following line and set the path to your declaration. If you use\n;; \t\t\t ;; more than one SGML declaration, leave it unset and use OpenSP as your\n;; \t\t\t ;; validator and include DTDDECL entries in your catalog files.\n;; \t\t\t ;; (setq sgml-declaration \"<path to your SGML declaration>\")\n\n;; \t\t\t (setq sgml-validate-command \"onsgmls -s %s %s\")\n\n;; \t\t\t ;; For xml-mode, override the default validate command by providing a\n;; \t\t\t ;; mode-hook and setting the SGML declaration to the one\n;; \t\t\t ;; provided with either SP or OpenSP.\n;; \t\t\t (defun my-psgml-xml-hook ()\n;; \t\t\t\t(setq sgml-validate-command \"onsgmls -s %s %s\")\n;; \t\t\t\t;;  (setq sgml-declaration \"d:/SP/pubtext/xml.dcl\")\n;; \t\t\t\t(setq sgml-declaration \"d:/OpenSP/pubtext/xml.dcl\")\n;; \t\t\t\t)\n;; \t\t\t (add-hook 'xml-mode-hook 'my-psgml-xml-hook)\n\n\n;; \t\t\t )))\n\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  COBOL\n;;;////////////////////////////////////////////////////////////////\n\n;; (if\n;;     (eq z-location 'work)\n;;     (progn\n;; \t\t(autoload 'cobol-mode \"cobol\")\n\n;; \t\t(setq auto-mode-alist\n;; \t\t\t\t(cons '(\"\\\\.cbl\\\\'\" . cobol-mode)\n;; \t\t\t\t\t\t(cons '(\"\\\\.cpy\\\\'\" . cobol-mode)\n;; \t\t\t\t\t\t\t\tauto-mode-alist )))\n;; \t\t(add-hook 'cobol-mode-hook 'ffap-bindings)\n\n;; \t\t))\n\n\n\n;;(setq speedbar-supported-extension-expressions\n;;\t\t(append '(\".cbl\" \".cpy\") speedbar-supported-extension-expressions))\n\n\n;;;////////////////////////////////////////////////////////////////\n;;;  DELPHI\n;;;////////////////////////////////////////////////////////////////\n\n;;(autoload 'delphi-mode \"delphi\")\n;;(setq auto-mode-alist\n;;       (cons '(\"\\\\.\\\\(pas\\\\|dpr\\\\|dpk\\\\)$\" . delphi-mode) auto-mode-alist))\n\n;;;;(setq speedbar-supported-extension-expressions\n;;;;\t\t(append '(\".pas\" \".dpr\" \".dpk\") speedbar-supported-extension-expressions))\n\n;;(add-hook 'delphi-mode-hook 'turn-on-font-lock)\n\n;;(autoload 'delphi-mode \"delphi\")\n;;(setq auto-mode-alist\n;;       (cons '(\"\\\\.\\\\(pas\\\\|dpr\\\\|dpk\\\\)$\" . delphi-mode) auto-mode-alist))\n\n;;;;(setq speedbar-supported-extension-expressions\n;;;;\t\t(append '(\".pas\" \".dpr\" \".dpk\") speedbar-supported-extension-expressions))\n\n;;(add-hook 'delphi-mode-hook 'turn-on-font-lock)\n\n\n\n;; =====================================================================\n;; =====================================================================\n;; USEFUL NOTES AND OTHER STUFF\n;; =====================================================================\n\n;; How to record and display a keyboard macro\n\n;; Just open a buffer and type C-x ( Then start typing in your macro.\n;; Once you are finished defining your macro type C-x ) Then type M-x\n;; name-last-kbd-macro. This will allow you to call your macro\n;; whatever you want. Next open up your .emacs file and position your\n;; cursor where you want the code for the macro to appear.  Type M-x\n;; insert-kbd-macro and type in the name.  The code will automatically\n;; be generated.\n\n;; =====================================================================\n;; =====================================================================\n\n;; Use shell-command-on-region M-| to send region to external\n;; process. If you use a prefix argument , C-u M-| this will replace\n;; the region with the output of the external process. Good for\n;; sending something to stdin and reading from stdout.\n\n;; =====================================================================\n;; =====================================================================\n\n;; To copy to named register: C-x r s a - Where a is the name of the\n;; register ( a - z ) to save the text to.\n\n;; To paste from named register: C-x r i a - Where a is the name of\n;; the register ( a - z ) to paste the saved text from.\n\n;; To remember current point: C-x r spc a - Where a is the name of the\n;; register to save point to.\n\n;; To jump to named point: C-x r j a - Where a is the name of the\n;; register holding desired point to jump to\n\n;; =====================================================================\n;; SOME GOOD URL's FOR EMACS SOURCES\n;; =====================================================================\n\n;; http://www.splode.com/users/friedman/software/emacs-lisp/\n;; http://www.anc.ed.ac.uk/~stephen/emacs/ell.html\n\n;; =====================================================================\n;; =====================================================================\n\n;;----------------------------------------------------------------------------\n;; Set up hooks for often-used major modes\n;;----------------------------------------------------------------------------\n\n\n;; (setq backup-by-copying t)\n\n;(require 'backups)\n;(move-backups t)\n;; Tell emacs where central backup directory is, and turn it on\n;; (setq backup-directory \"~/backups\")\n;; (require 'backups)\n;; (move-backups t)\n\n;;@TODO: verify current ...\n;; (setq backup-directory \"~/.backups\")\n\n;; (or (directory-files backup-directory)\n;; \t  (make-directory backup-directory))\n\n;; (require 'backup-dir)\n;; (setq bkup-backup-directory-info\n;; \t\t`(\n;;        (t ,(concat backup-directory \"/\") full-path prepend-name search-upward)\n;; ;      (t ,(concat backup-directory \"/\"))\n;; \t\t  ))\n\n\n\n;; (cond  ;;--- FSF-Emacs ---------------------------------------------------\n;;  ((eq system-type 'windows-nt) ;; WinNT\n;;   (cond\n;; \t(t\n;; \t (progn\n;; \t\t(setq backup-by-copying nil)\n;; \t\t)\n;; \t )))\n;;  ((eq system-type 'gnu/linux);; GNU-Linux\n;;   (cond\n;; \t(t\n;; \t (progn\n;; \t\t(setq backup-by-copying t)\n;; \t\t)\n;; \t )))\n;;  ((eq system-type 'usg-unix-v);; Sun Solaris\n;;   (cond\n;; \t(t\n;; \t (progn\n;; \t\t(setq backup-by-copying t)\n;; \t\t)\n;; \t )))\n;;  )\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":98698}]],"length":98698}
