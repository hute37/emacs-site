This is t.info, produced by makeinfo version 4.0 from
/home/jaalto/tmp/t.texinfo.

   quotation

1.0 Tiny Tools Readme
*********************

     [The Sourceforge Public Summary] Emacs Tiny Tools is a collection
           of libraries and packages, which are designed to be OS and
     X/Emacs         platform independent. E.g. configure load-path
     automatically, URL         handler, easy-delete, mail complete and
     many more.

     This file is README.txt included in Emacs Tiny Tools Kit. It
      contains instructions how to install a cross platform
     Emacs/XEmacs/         Unix/Win32 compatible utilities for wide
     variety of tasks:         diff/patch; searching, replacing,
     caching files, automatic         load-path setup and more.

     $Id: t.info,v 1.1 2005-12-04 20:58:46 hute37 Exp $
     $Url: http://tiny-tools.sourceforge.net/
     (http://tiny-tools.sourceforge.net/) $
     $Contactid: jari.aalto $
     $Keywords: readme, text, emacs, perl, tiny tools $

2.0 Kit installation instructions
*********************************

 2.1 Unpacking
=============

     In Win32 use winzip 8.0+ found at http://www.winzip.com/
(http://www.winzip.com/) and in         Unix use unzip available at
   http://www.info-zip.org/pub/infozip/
(http://www.info-zip.org/pub/infozip/) Extract the kit and it will
  create directory according to the version number: tiny-YYYY-MM-DD/
     or tiny-YYYY.MMDD/. The Kit build method is only for your
convenience and it is not necessary to run the build command in order
     to use the Emacs Lisp files or to read the documentation under
    /doc.
           % mkdir -p $HOME/elisp/packages/
           % cd $HOME/elisp/packages/
           % unzip -x ~/tmp/download/tiny-tools*.zip

2.2 Quick install - personal
============================

     If you just want to install the package for your         personal
use, add following lines at the start of your         Emacs
initialization file. Lines will configure your Emacs to be
aware of all lisp paths under $HOME/elisp or $HOME/lisp.
           ;; $HOME/.emacs
           ;; PLEASE READ DOCUMENTATION OF TINYPATH FOR MORE.
           (load &quot;ABSOLUTE-INSTALLATION-PATH-HERE/tinypath&quot;)
           ;; The rest of the code can be anywhere in .emacs.
           ;; Next, autoconfigure most of the packages with defaults
           ;; See M-x tiny-setup-display and C-h f tiny-setup
           (require 'tiny-setup)
           (tiny-setup 'all)
           ;; Perhaps you would like to load some package immediately.
           (require 'tinymy)
           ;; End of example

     The installation function tiny-setup logs actions made to Emacs
    into Messages or XEmacs Message-Log buffer. The output looks
 something like this with the default setting all. For more finer
  control for each individual feature, refer to C-h f
tiny-setup. Messages that read &quot;No options to configure&quot; means
       that there is no default installation (yet) and you have to
   manually take the package into use by reading its documentation.
     The setup is very conservative: anything serious in existing emacs
       will not be overridden.
           TinySetup: tinyappend      configured with `bind'
           TinySetup: Key &quot;C-c=&quot; set to `tinyappend-end'.
           TinySetup: Key &quot;C-c-&quot; set to `tinyappend-beg'.
           TinySetup: Key &quot;C-c_&quot; set to `tinyappend-kill'.
           TinySetup: Key &quot;C-c|&quot; set to `tinyappend-yank'.
           TinySetup: tinybookmark    configured with `defalias'
           TinySetup: tinybuffer      configured with `bind'
           TinySetup: tinycache       configured with `autoload'
           TinySetup: tinychist       No options to configure.
           TinySetup: tinycomment     configured with `bind'
           TinySetup: Key [(meta 59)](M-;) set to `tinycomment-indent-for-comment' (FORCED).
           TinySetup: tinycompile     configured with `autoload'
           TinySetup: tinydesk        configured with `activate'
           TinySetup: tinydiff        configured with `autoload'
           TinySetup: `auto-mode-alist' now contains (\.diff\' . turn-on-tinydiff-mode)
           TinySetup: `auto-mode-alist' now contains (\.patch\' . turn-on-tinydiff-mode)
           TinySetup: tinydired       configured with `autoload'
           TinySetup: tinyeat         configured with `bind'
           TinySetup: Key (ESC DEL) already has has definition `backward-kill-word'. Not set to `tinyeat-erase-buffer'
           TinySetup: tinyef          configured with `autoload'
           TinySetup: tinygnus        configured with `autoload'
           TinySetup: tinyhotlist     configured with `autoload'
           TinySetup: tinyigrep       configured with `autoload'
           TinySetup: tinyindent      No options to configure.
           [And so on...]

2.3 Quick install - site wide
=============================

     If you are Using PC or your own Linux box, including both XEmacs
     and Emacs installations, plus lot of extra Emacs packages that are
       available form the Net, you need to tell the different locations
       where the installed lisp directories are. In this case, you
have to         set the tinypath-:load-path-root yourself. In previous
personal         installation example, this was automatically
determined.
           ;;  Your lisp/site-start.el should contain this installation code.
           ;;  STILL, IN SITE-WIDE SETUP, THE CACHE IS STORED TO EACH USER'S
           ;;  HOME DIRECTORY.
           ;;
           ;;  List of ROOT directories where all Emacs lisp
           ;;  files are located. Update list according to your site.
           ;;  No need to optimize away non-existing directories,
           ;;  because they will be ignored.
           (setq tinypath-:load-path-root
             (list
               (if (boundp 'xemacs-logo)               ;; ROOT DIR ONE
                   &quot;Your-XEmacs-NN.NN/lisp&quot;
                 &quot;Your-Emacs-NN.NN/lisp&quot;)
               (if (boundp 'xemacs-logo)               ;; ROOT DIR TWO
                   &quot;Your-XEmacs-site-list-directory&quot;
                 &quot;Your-Emacs-site-list-directory&quot;)
               &quot;~/elisp&quot;                               ;; ... and so on
               &quot;~/lisp&quot;))
           (load &quot;ABSOLUTE-INSTALLATION-PATH-HERE/tinypath&quot;)
           ;; End of example

     After the code above, The site users can start configuring all the
       packages found in load-path. Appropriate startup code is needed
       for each user's $HOME/.emacs files to activate the packages,
    unless you include some site wide defaults.

2.4 Install from scratch - without prior elisp directory
========================================================

     2.4.1 Preconditions for Unix

     If you don't have your private Emacs lisp directory yet, it's
  time to create one. Decide where you want to put future downloaded
     packages. Traditionally this has been $HOME/elisp. Run command:
           % mkdir $HOME/elisp

     2.4.2 Preconditions for Win32

     In Windows operating system, there is no default HOME,         so
you have to choose one directory for your personal use.          Emacs
installation in Win32 might look like this:
           C:/emacs/emacs-19.34/       # your old Emacs
           C:/emacs/emacs-20.7.1/      # the new Emacs
           C:/home/elisp               # your private elisp dir
           dos&gt; c:
           dos&gt; md \home
           dos&gt; cd \home
           dos&gt; md elisp

     At minimum, you must add environment variable HOME and make your
     Win98/NT/W2K have it visible at boot time. In Win9x, add this line
       to your c:\autoexec.bat. In Windows ME/NT/W2K, use Control
Panel =&gt;         System =&gt; Environment. Make sure you also create
the directory to         disk. Refer to NT Emacs FAQ at
http://www.gnu.org/software/emacs/windows/ntemacs.html
(http://www.gnu.org/software/emacs/windows/ntemacs.html)         for
more complete information about installing Win32 Emacs. After this
  line, you Emacs translates tilde(~) character into reference to
  the HOME.
           set HOME=c:\home

     Your Emacs startup file must now reside at directory $HOME/.emacs
      which is the traditional way of saying &quot;Emacs startup file
is under HOME&quot;.          In win32, this means that the location
would be:
           c:\home\.emacs

     2.4.3 Making Emacs aware of elisp

     Emacs can't load additional packages if it doesn't know where they
       are located. The traditional way has been to add appropriate
PATHs         one by one to the load-path variable. Tiny Tools provides
       more versatile and easier path configuration as demonstrated
below:
           ;; $HOME/.emacs -- Emacs startup file
           ;;  These two lines are not necessary, since tinypath.el will
           ;;  handle all this. It has been the traditional Emacs way
           ;;  to add paths in case you need to know
           ;;
           ;; (require 'cl)
           ;; (pushnew  (expand-file-name &quot;~/elisp&quot;) load-path :test 'string=)
           (load &quot;ABSOLUTE-INSTALLATION-PATH-HERE/tinypath&quot;)
           ;; End of $HOME/.emacs

     The &quot;old&quot; method required you to track every change of
Emacs         paths and manually keep it up to date. It is much easier
to let         TinyPath